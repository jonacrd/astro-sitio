---
import BaseLayout from '../../layouts/BaseLayout.astro'
import SellerGuard from '../../components/react/SellerGuard.tsx'
import OrderNotification from '../../components/react/OrderNotification.tsx'
---

<BaseLayout title="Mis Pedidos">
  <SellerGuard client:load>
    <main class="min-h-screen bg-gray-900 pb-20">
      <!-- Header con iconos -->
      <div class="bg-gray-800 px-4 py-4 flex items-center justify-between">
        <div class="flex items-center gap-3">
          <div class="relative">
            <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
            </div>
            <div class="absolute -top-1 -right-1 w-3 h-3 bg-orange-500 rounded-full"></div>
          </div>
          <h1 class="text-xl font-bold text-white">Tienda</h1>
        </div>
        
        <div class="flex items-center gap-4">
          <!-- Notificaciones -->
          <button class="relative p-2 text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.5 19.5L9 15l4.5 4.5" />
            </svg>
          </button>
          
          <!-- Mensajes -->
          <button class="relative p-2 text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <div class="absolute -top-1 -right-1 w-5 h-5 bg-orange-500 rounded-full flex items-center justify-center">
              <span class="text-xs text-white font-bold">3</span>
            </div>
          </button>
        </div>
      </div>

      <!-- Filtros de estado -->
      <div class="px-4 py-4">
        <div class="flex gap-2 overflow-x-auto">
          <button class="filter-btn active px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap" data-filter="all">
            Todos
          </button>
          <button class="filter-btn px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap border border-blue-500 text-blue-500" data-filter="placed">
            Pendientes <span class="ml-1 px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-xs">1</span>
          </button>
          <button class="filter-btn px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap border border-blue-500 text-blue-500" data-filter="seller_confirmed">
            Confirmado
          </button>
          <button class="filter-btn px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap border border-blue-500 text-blue-500" data-filter="completed">
            Entregados
          </button>
        </div>
      </div>

      <!-- Lista de pedidos -->
      <div class="px-4 pb-4">
        <div id="orders-container" class="space-y-3">
          <!-- Los pedidos se cargarán aquí dinámicamente -->
          <div class="text-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-400">Cargando pedidos...</p>
          </div>
        </div>
      </div>
    </main>
    
    <!-- Notificación de nuevos pedidos -->
    <OrderNotification client:load sellerId="" />
  </SellerGuard>
</BaseLayout>

<style>
  .filter-btn {
    transition: all 0.2s ease;
  }
  
  .filter-btn.active {
    background-color: #3b82f6;
    color: white;
  }
  
  .filter-btn:not(.active):hover {
    background-color: rgba(59, 130, 246, 0.1);
  }
</style>

<script>
  import { supabase } from '../../lib/supabase-browser';

  // Cargar pedidos del vendedor
  async function loadOrders(filter = 'all') {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        console.error('Error obteniendo usuario:', userError);
        return;
      }

      let query = supabase
        .from('orders')
        .select(`
          id,
          status,
          total_cents,
          created_at,
          user_id
        `)
        .eq('seller_id', user.id)
        .order('created_at', { ascending: false });

      if (filter !== 'all') {
        query = query.eq('status', filter);
      }

      const { data: orders, error: ordersError } = await query;

      if (ordersError) {
        console.error('Error cargando pedidos:', ordersError);
        return;
      }

      await renderOrders(orders || []);
    } catch (error) {
      console.error('Error cargando pedidos:', error);
    }
  }

  // Renderizar pedidos
  async function renderOrders(orders) {
    const container = document.getElementById('orders-container');
    if (!container) return;

    if (orders.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
            </svg>
          </div>
          <p class="text-gray-400">No hay pedidos disponibles</p>
        </div>
      `;
      return;
    }

    // Obtener nombres de compradores
    const buyerIds = [...new Set(orders.map(order => order.user_id))];
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, name')
      .in('id', buyerIds);

    const profilesMap = {};
    if (!profilesError && profiles) {
      profiles.forEach(profile => {
        profilesMap[profile.id] = profile.name;
      });
    }

    container.innerHTML = orders.map(order => {
      const orderId = order.id.substring(0, 8);
      const date = new Date(order.created_at);
      const formattedDate = date.toLocaleDateString('es-ES', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      });
      const time = date.toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit'
      });
      const price = (order.total_cents / 100).toFixed(2);
      const buyerName = profilesMap[order.user_id] || 'Cliente';
      
      let statusClass = '';
      let statusText = '';
      
      switch (order.status) {
        case 'placed':
          statusClass = 'text-yellow-500';
          statusText = 'Pendiente';
          break;
        case 'seller_confirmed':
          statusClass = 'text-blue-500';
          statusText = 'Confirmado';
          break;
        case 'completed':
          statusClass = 'text-green-500';
          statusText = 'Entregado';
          break;
        case 'cancelled':
          statusClass = 'text-red-500';
          statusText = 'Cancelado';
          break;
        default:
          statusClass = 'text-gray-500';
          statusText = order.status;
      }

      return `
        <div class="bg-gray-800 rounded-lg p-4 hover:bg-gray-750 transition-colors">
          <div class="flex items-start justify-between mb-2">
            <div>
              <h3 class="text-white font-semibold">Pedido #${orderId}</h3>
              <p class="text-gray-400 text-sm">${formattedDate}, ${time}</p>
            </div>
            <span class="${statusClass} font-medium">${statusText}</span>
          </div>
          
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <div class="w-4 h-4 bg-blue-600 rounded flex items-center justify-center">
                <svg class="w-2 h-2 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <span class="text-white text-sm">Pedido de ${buyerName}</span>
            </div>
            <span class="text-blue-500 font-semibold">$${price}</span>
          </div>
        </div>
      `;
    }).join('');
  }

  // Manejar filtros
  function setupFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remover clase active de todos los botones
        filterButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.classList.add('border', 'border-blue-500', 'text-blue-500');
        });
        
        // Agregar clase active al botón clickeado
        button.classList.add('active');
        button.classList.remove('border', 'border-blue-500', 'text-blue-500');
        
        // Cargar pedidos con el filtro seleccionado
        const filter = (button as HTMLButtonElement).dataset.filter;
        loadOrders(filter);
      });
    });
  }

  // Inicializar cuando se carga la página
  document.addEventListener('DOMContentLoaded', () => {
    loadOrders();
    setupFilters();
  });
</script>