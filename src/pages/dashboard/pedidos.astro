---
import BaseLayout from '../../layouts/BaseLayout.astro'
import SellerGuard from '../../components/react/SellerGuard.tsx'
import OrderNotification from '../../components/react/OrderNotification.tsx'
import EnhancedOrderCard from '../../components/react/EnhancedOrderCard.tsx'
import React from 'react'
---

<BaseLayout title="Mis Pedidos">
  <SellerGuard client:load>
    <main class="min-h-screen bg-gray-900 pb-20">
      <!-- Header con iconos -->
      <div class="bg-gray-800 px-4 py-4 flex items-center justify-between">
        <div class="flex items-center gap-3">
          <div class="relative">
            <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
            </div>
            <div class="absolute -top-1 -right-1 w-3 h-3 bg-orange-500 rounded-full"></div>
          </div>
          <h1 class="text-xl font-bold text-white">Tienda</h1>
        </div>
        
        <div class="flex items-center gap-4">
          <!-- Notificaciones -->
          <button class="relative p-2 text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.5 19.5L9 15l4.5 4.5" />
            </svg>
          </button>
          
          <!-- Mensajes -->
          <button class="relative p-2 text-gray-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
            <div class="absolute -top-1 -right-1 w-5 h-5 bg-orange-500 rounded-full flex items-center justify-center">
              <span class="text-xs text-white font-bold" id="notification-count">0</span>
            </div>
          </button>
        </div>
      </div>

      <!-- Filtros de estado -->
      <div class="px-4 py-4">
        <div class="flex gap-2 overflow-x-auto">
          <button class="filter-btn active px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap" data-filter="all">
            Todos
          </button>
          <button class="filter-btn px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap border border-blue-500 text-blue-500" data-filter="pending">
            Pendientes <span class="ml-1 px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-xs" id="pending-count">0</span>
          </button>
          <button class="filter-btn px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap border border-blue-500 text-blue-500" data-filter="confirmed">
            Confirmado
          </button>
          <button class="filter-btn px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap border border-blue-500 text-blue-500" data-filter="completed">
            Entregados
          </button>
        </div>
      </div>

      <!-- Lista de pedidos -->
      <div class="px-4 pb-4">
        <div id="orders-container" class="space-y-3">
          <!-- Los pedidos se cargar√°n aqu√≠ din√°micamente -->
          <div class="text-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-400">Cargando pedidos...</p>
          </div>
        </div>
      </div>
    </main>
    
    <!-- Notificaci√≥n de nuevos pedidos -->
    <OrderNotification client:load sellerId="8f0a8848-8647-41e7-b9d0-323ee000d379" />
  </SellerGuard>
</BaseLayout>

<style>
  .filter-btn {
    transition: all 0.2s ease;
  }
  
  .filter-btn.active {
    background-color: #3b82f6;
    color: white;
  }
  
  .filter-btn:not(.active):hover {
    background-color: rgba(59, 130, 246, 0.1);
  }
</style>

<script>
  import { supabase } from '../../lib/supabase-browser';

  // UUID espec√≠fico para Diego Ram√≠rez (vendedor activo)
  const SELLER_ID = '8f0a8848-8647-41e7-b9d0-323ee000d379';

  // Cargar pedidos del vendedor usando endpoint
  async function loadOrders(filter = 'all') {
    console.log('üîç Cargando pedidos con filtro:', filter);
    
    try {
      // Obtener token de autorizaci√≥n
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.access_token) {
        throw new Error('No hay sesi√≥n activa');
      }
      
      const response = await fetch('/api/seller/orders', {
        headers: {
          'Authorization': `Bearer ${session.access_token}`
        }
      });
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Error cargando pedidos');
      }
      
      let orders = result.data.orders || [];
      
      // Aplicar filtro
      if (filter === 'pending') {
        orders = orders.filter(order => order.status === 'pending');
      } else if (filter === 'confirmed') {
        orders = orders.filter(order => order.status === 'seller_confirmed');
      } else if (filter === 'completed') {
        orders = orders.filter(order => order.status === 'completed');
      }

      console.log(`‚úÖ Pedidos obtenidos: ${orders.length}`);
      await renderOrders(orders);
      
      // Actualizar contadores
      updateCounters(orders);
      
    } catch (error) {
      console.error('‚ùå Error cargando pedidos:', error);
      showError('Error inesperado: ' + error.message);
    }
  }

  // Renderizar pedidos con HTML directo
  async function renderOrders(orders) {
    const container = document.getElementById('orders-container');
    if (!container) return;

    console.log(`üé® Renderizando ${orders.length} pedidos`);
    
    // Guardar √≥rdenes en variable global para acceso desde modal
    (window as any).currentOrders = orders;

    if (orders.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="w-16 h-16 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
            </svg>
          </div>
          <p class="text-gray-400">No hay pedidos disponibles</p>
        </div>
      `;
      return;
    }

    // Usar nombres de compradores del endpoint
    const profilesMap = {};
    orders.forEach(order => {
      if (order.buyer_name) {
        profilesMap[order.user_id] = order.buyer_name;
      }
    });
    console.log('‚úÖ Nombres de compradores:', profilesMap);

    // Renderizar pedidos con HTML directo
    container.innerHTML = orders.map(order => {
      const orderId = order.id.substring(0, 8);
      const date = new Date(order.created_at);
      const formattedDate = date.toLocaleDateString('es-ES', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      });
      const time = date.toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit'
      });
      const price = (order.total_cents / 100).toFixed(2);
      const buyerName = profilesMap[order.user_id] || 'Cliente';
      
      let statusClass = '';
      let statusText = '';
      
      switch (order.status) {
        case 'pending':
          statusClass = 'text-yellow-500';
          statusText = 'Pendiente';
          break;
        case 'seller_confirmed':
          statusClass = 'text-blue-500';
          statusText = 'Confirmado';
          break;
        case 'delivered':
          statusClass = 'text-green-500';
          statusText = 'Entregado';
          break;
        case 'completed':
          statusClass = 'text-purple-500';
          statusText = 'Completado';
          break;
        case 'cancelled':
          statusClass = 'text-red-500';
          statusText = 'Cancelado';
          break;
        default:
          statusClass = 'text-gray-500';
          statusText = order.status;
      }

      return `
        <div class="bg-gray-800 rounded-lg p-4 mb-4 hover:bg-gray-750 transition-colors">
          <div class="flex items-start justify-between mb-3">
            <div>
              <h3 class="text-white font-semibold">Pedido #${orderId}</h3>
              <p class="text-gray-400 text-sm">${formattedDate}, ${time}</p>
            </div>
            <span class="${statusClass} font-medium">${statusText}</span>
          </div>
          
          <div class="flex items-center justify-between mb-3">
            <div class="flex items-center gap-2">
              <div class="w-4 h-4 bg-blue-600 rounded flex items-center justify-center">
                <svg class="w-2 h-2 text-white" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <span class="text-white text-sm">Pedido de ${buyerName}</span>
              ${order.payment_method === 'transfer' ? '<span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">üí≥ Transferencia</span>' : '<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">üí∞ Efectivo</span>'}
            </div>
            <span class="text-blue-500 font-semibold">$${price}</span>
          </div>
          
          <!-- Botones de estado -->
          <div class="flex gap-2 flex-wrap">
            ${order.status === 'pending' ? `
              <button 
                onclick="updateOrderStatus('${order.id}', 'seller_confirmed')"
                class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
              >
                ${order.payment_method === 'transfer' ? '‚úÖ Confirmar Transferencia' : '‚úÖ Confirmar Pedido'}
              </button>
            ` : ''}
            
            ${order.status === 'seller_confirmed' ? `
              <button 
                onclick="requestDelivery('${order.id}')"
                class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm"
              >
                üöö Solicitar Delivery
              </button>
              <button 
                onclick="updateOrderStatus('${order.id}', 'delivered')"
                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
              >
                üì¶ Marcar como Entregado
              </button>
            ` : ''}
            
            ${order.status === 'delivered' ? `
              <button 
                onclick="updateOrderStatus('${order.id}', 'completed')"
                class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm"
              >
                ‚úÖ Completar Pedido
              </button>
            ` : ''}
            
            <button 
              onclick="viewOrderDetails('${order.id}')"
              class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors text-sm"
            >
              üëÅÔ∏è Ver Detalles
            </button>
          </div>
        </div>
      `;
    }).join('');
    
    console.log('‚úÖ Pedidos renderizados correctamente');
  }

  // Actualizar contadores
  function updateCounters(orders) {
    const pendingCount = orders.filter(order => order.status === 'pending').length;
    const totalCount = orders.length;
    
    const pendingCountElement = document.getElementById('pending-count');
    const notificationCountElement = document.getElementById('notification-count');
    
    if (pendingCountElement) {
      pendingCountElement.textContent = pendingCount.toString();
    }
    
    if (notificationCountElement) {
      notificationCountElement.textContent = totalCount.toString();
    }
    
    console.log(`üìä Contadores actualizados: ${pendingCount} pendientes, ${totalCount} total`);
  }

  // Mostrar error
  function showError(message) {
    const container = document.getElementById('orders-container');
    if (!container) return;
    
    container.innerHTML = `
      <div class="text-center py-8">
        <div class="w-16 h-16 bg-red-900 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p class="text-red-400">${message}</p>
      </div>
    `;
  }

  // Actualizar estado de orden
  async function updateOrderStatus(orderId, newStatus) {
    try {
      console.log('üîÑ Actualizando estado de orden:', orderId, newStatus);
      
      const response = await fetch('/api/orders/update-status', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId: orderId,
          newStatus: newStatus,
          userType: 'seller'
        }),
      });

      const data = await response.json();

      if (data.success) {
        console.log('‚úÖ Estado de orden actualizado:', newStatus);
        
        // Disparar evento de notificaci√≥n
        window.dispatchEvent(new CustomEvent('order-status-updated', {
          detail: {
            orderId: orderId,
            newStatus: newStatus,
            updatedAt: new Date().toISOString()
          }
        }));
        
        // Recargar pedidos
        await loadOrders();
      } else {
        console.error('‚ùå Error actualizando estado:', data.error);
        alert('Error actualizando el estado de la orden: ' + data.error);
      }
    } catch (error) {
      console.error('‚ùå Error en updateOrderStatus:', error);
      alert('Error actualizando el estado de la orden');
    }
  }

  // Solicitar delivery
  function requestDelivery(orderId) {
    console.log('üöö Solicitando delivery para orden:', orderId);
    window.location.href = `/seller/orders/${orderId}/delivery`;
  }

  // Ver detalles de orden
  function viewOrderDetails(orderId) {
    console.log('üëÅÔ∏è Ver detalles de orden:', orderId);
    
    // Buscar la orden en la lista actual
    const currentOrders = (window as any).currentOrders || [];
    const order = currentOrders.find((o: any) => o.id === orderId);
    
    if (!order) {
      alert('No se pudo encontrar la orden');
      return;
    }
    
    // Crear modal de detalles
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
    modal.innerHTML = `
      <div class="bg-white rounded-lg max-w-2xl max-h-[90vh] overflow-hidden w-full">
        <div class="flex justify-between items-center p-4 border-b">
          <h3 class="text-lg font-semibold">Detalles del Pedido #${orderId.substring(0, 8)}</h3>
          <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="p-4 overflow-y-auto max-h-[70vh]">
          <div class="space-y-4">
            <!-- Informaci√≥n b√°sica -->
            <div class="bg-gray-50 p-3 rounded-lg">
              <h4 class="font-semibold mb-2">Informaci√≥n del Pedido</h4>
              <div class="grid grid-cols-2 gap-2 text-sm">
                <div><strong>ID:</strong> ${orderId.substring(0, 8)}</div>
                <div><strong>Fecha:</strong> ${new Date(order.created_at).toLocaleDateString('es-ES')}</div>
                <div><strong>Cliente:</strong> ${order.buyer?.name || 'N/A'}</div>
                <div><strong>Total:</strong> $${(order.total_cents / 100).toFixed(2)}</div>
                <div><strong>Estado:</strong> <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">${order.status}</span></div>
                <div><strong>M√©todo:</strong> <span class="px-2 py-1 ${order.payment_method === 'transfer' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'} rounded text-xs">${order.payment_method === 'transfer' ? 'üí≥ Transferencia' : 'üí∞ Efectivo'}</span></div>
              </div>
            </div>
            
            <!-- Comprobante de transferencia -->
            ${order.payment_method === 'transfer' && order.transfer_proof ? `
              <div class="bg-blue-50 p-3 rounded-lg">
                <h4 class="font-semibold mb-2">üì∏ Comprobante de Transferencia</h4>
                <div class="space-y-2">
                  <img src="${order.transfer_proof}" alt="Comprobante" class="w-full max-w-sm rounded border" style="max-height: 300px; object-fit: contain;">
                  <div class="flex gap-2">
                    <button onclick="downloadProof('${orderId}', '${order.transfer_proof}')" class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700">
                      ‚¨áÔ∏è Descargar
                    </button>
                  </div>
                </div>
              </div>
            ` : ''}
            
            <!-- Productos -->
            <div class="bg-gray-50 p-3 rounded-lg">
              <h4 class="font-semibold mb-2">Productos</h4>
              ${order.items ? order.items.map(item => `
                <div class="flex justify-between items-center p-2 bg-white rounded border">
                  <div>
                    <p class="font-medium">${item.title}</p>
                    <p class="text-sm text-gray-500">Cantidad: ${item.qty}</p>
                  </div>
                  <p class="font-semibold">$${((item.price_cents * item.qty) / 100).toFixed(2)}</p>
                </div>
              `).join('') : '<p class="text-gray-500">No hay informaci√≥n de productos disponible</p>'}
            </div>
          </div>
        </div>
        <div class="flex justify-end gap-3 p-4 border-t">
          <button onclick="this.closest('.fixed').remove()" class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors">
            Cerrar
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  }
  
  // Descargar comprobante
  function downloadProof(orderId, proofUrl) {
    const link = document.createElement('a');
    link.href = proofUrl;
    link.download = `comprobante_${orderId.substring(0, 8)}.jpg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Hacer funciones globales
  (window as any).updateOrderStatus = updateOrderStatus;
  (window as any).viewOrderDetails = viewOrderDetails;
  (window as any).requestDelivery = requestDelivery;
  (window as any).downloadProof = downloadProof;

  // Manejar filtros
  function setupFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        console.log('üîç Filtro clickeado:', (button as HTMLButtonElement).dataset.filter);
        
        // Remover clase active de todos los botones
        filterButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.classList.add('border', 'border-blue-500', 'text-blue-500');
        });
        
        // Agregar clase active al bot√≥n clickeado
        button.classList.add('active');
        button.classList.remove('border', 'border-blue-500', 'text-blue-500');
        
        // Cargar pedidos con el filtro seleccionado
        const filter = (button as HTMLButtonElement).dataset.filter;
        loadOrders(filter).catch(error => {
          console.error('‚ùå Error cargando pedidos:', error);
        });
      });
    });
  }

  // Inicializar cuando se carga la p√°gina
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Inicializando dashboard de pedidos...');
    
    // Importar React
    const React = await import('react');
    window.React = React;
    
    loadOrders();
    setupFilters();
  });
</script>