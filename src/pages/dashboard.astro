---
import BaseLayout from '@/layouts/BaseLayout.astro'
import { repos } from '@lib/repos'

// Para el sistema mock, usamos un vendedor por defecto
const MOCK_SELLER_ID = 's1' // Carnes del Zulia
const MOCK_USER = { id: 'mock-user', role: 'SELLER', name: 'Vendedor Demo' }

// Obtener inventario del vendedor mock
let inventory = []
try {
  const rows = await repos.inventory.list(MOCK_SELLER_ID)
  inventory = rows.map(sp => ({
    id: sp.id,
    productId: sp.productId,
    stock: sp.stock,
    active: sp.active,
    title: sp.product.title,
    imageUrl: sp.product.imageUrl,
    category: sp.product.category,
    priceCents: sp.product.priceCents,
    discountCents: sp.product.discountCents || 0,
  }))
} catch (error) {
  console.error('Error loading inventory:', error)
  // Inventario de respaldo si hay error
  inventory = [
    { id: 'sp_s1_jamon', productId: 'p_jamon_serrano', stock: 15, active: true, title: 'Jam√≥n Serrano 200g', category: 'fiambres', priceCents: 4500, discountCents: 0 },
    { id: 'sp_s1_salchichon', productId: 'p_salchichon', stock: 12, active: true, title: 'Salchich√≥n Espa√±ol', category: 'fiambres', priceCents: 3200, discountCents: 0 },
    { id: 'sp_s1_chorizo', productId: 'p_chorizo_parrilla', stock: 20, active: true, title: 'Chorizo para Parrilla', category: 'carnes', priceCents: 2800, discountCents: 0 },
    { id: 'sp_s1_pollo', productId: 'p_pollo_entero', stock: 8, active: true, title: 'Pollo Entero 1.5kg', category: 'pollos', priceCents: 4200, discountCents: 0 },
    { id: 'sp_s1_pechuga', productId: 'p_pechuga_pollo', stock: 10, active: true, title: 'Pechuga de Pollo 1kg', category: 'pollos', priceCents: 3800, discountCents: 0 },
  ]
}
---

<BaseLayout title="Dashboard - Gesti√≥n de Inventario">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Dashboard Multi-Vendedor</h1>
        <p class="mt-2 text-gray-600">
          {MOCK_USER.role === 'ADMIN' ? 'Panel de administraci√≥n' : 'Gesti√≥n de tu inventario y ventas'}
        </p>
      </div>

      {MOCK_USER.role === 'SELLER' ? (
        <div class="space-y-6">
          <!-- Estado del Vendedor -->
          <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Estado de Disponibilidad</h2>
            <div class="flex items-center gap-3">
              <span id="status-label" class="text-sm text-slate-600">Estado: ‚Äî</span>
              <button id="btn-toggle" class="px-3 py-1 rounded bg-emerald-600 text-white hover:bg-emerald-700 transition-colors">
                Poner en Activo
              </button>
            </div>
        </div>

          <!-- KPIs Stats -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-sm font-medium text-gray-500">Ventas Hoy</h3>
              <p class="text-2xl font-bold text-gray-900" id="today-count">0</p>
              <p class="text-sm text-gray-600" id="today-total">$0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-sm font-medium text-gray-500">√öltimos 7 d√≠as</h3>
              <p class="text-2xl font-bold text-gray-900" id="week-count">0</p>
              <p class="text-sm text-gray-600" id="week-total">$0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-sm font-medium text-gray-500">Stock Bajo</h3>
              <p class="text-2xl font-bold text-orange-600" id="low-stock-count">0</p>
              <p class="text-sm text-gray-600">productos &lt; 5</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-sm font-medium text-gray-500">Clientes</h3>
              <p class="text-2xl font-bold text-blue-600" id="customers-count">0</p>
              <p class="text-sm text-gray-600">√∫ltimos 7 d√≠as</p>
            </div>
          </div>

          <!-- Agregar Productos -->
          <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Agregar Productos al Inventario</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Buscar producto:</label>
                <input 
                  type="text" 
                  id="search-global" 
                  placeholder="Escribe para buscar..." 
                  class="w-full border rounded px-3 py-2"
                />
    </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Categor√≠a:</label>
                <select id="filter-category" class="w-full border rounded px-3 py-2">
                  <option value="">Todas</option>
                  <option value="comida">Comida</option>
                  <option value="ropa">Ropa</option>
                  <option value="tecnologia">Tecnolog√≠a</option>
                </select>
        </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Stock inicial:</label>
                <input 
                  type="number" 
                  id="initial-stock" 
                  min="0" 
                  value="1" 
                  class="w-full border rounded px-3 py-2"
                />
            </div>
        </div>

            <div id="search-results" class="max-h-60 overflow-y-auto border rounded mb-4">
              <p class="p-4 text-gray-500 text-center">Busca productos para agregar a tu inventario</p>
            </div>
        </div>

          <!-- Inventario Actual -->
          <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
              <h2 class="text-lg font-semibold text-gray-900">Mi Inventario</h2>
            </div>
            
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categor√≠a</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
              </thead>
                <tbody id="inventory-table" class="bg-white divide-y divide-gray-200">
                  {inventory.length === 0 ? (
                <tr>
                      <td colspan="6" class="px-6 py-12 text-center text-gray-500">
                        No tienes productos en tu inventario. Busca productos arriba para agregar.
                  </td>
                </tr>
                  ) : (
                    inventory.map(item => (
                      <tr data-id={item.id} class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="flex items-center">
                            {item.imageUrl && (
                              <img class="h-10 w-10 rounded-lg object-cover mr-3" src={item.imageUrl} alt={item.title} />
                            )}
                            <div>
                              <div class="text-sm font-medium text-gray-900">{item.title}</div>
          </div>
        </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{item.category}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <input 
                            type="number" 
                            value={item.stock} 
                            min="0"
                            class="w-20 px-2 py-1 border rounded text-sm"
                            data-field="stock"
                            data-id={item.id}
                          />
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <label class="flex items-center">
                            <input 
                              type="checkbox" 
                              checked={item.active}
                              class="rounded"
                              data-field="active"
                              data-id={item.id}
                            />
                            <span class="ml-2 text-sm text-gray-600">
                              {item.active ? 'Activo' : 'Inactivo'}
                            </span>
                          </label>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          ${(item.priceCents / 100).toFixed(0)}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button 
                            class="text-red-600 hover:text-red-900"
                            data-action="delete"
                            data-id={item.id}
                          >
                            üóëÔ∏è Eliminar
                          </button>
                  </td>
                </tr>
                    ))
                  )}
              </tbody>
            </table>
          </div>
        </div>

          <!-- Top Products y Low Stock -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Productos Top (7 d√≠as)</h3>
              <div id="top-products" class="space-y-2">
                <p class="text-gray-500 text-sm">Cargando...</p>
              </div>
          </div>
            
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Stock Bajo</h3>
              <div id="low-stock-list" class="space-y-2">
                <p class="text-gray-500 text-sm">Cargando...</p>
              </div>
            </div>
          </div>

          <!-- Clientes Recientes -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Clientes Recientes</h3>
            <div id="customers-list" class="space-y-2">
              <p class="text-gray-500 text-sm">Cargando...</p>
      </div>
    </div>

        </div>
      ) : (
        <div class="bg-white rounded-lg shadow p-6 text-center">
          <p class="text-gray-600">No tienes permisos para ver este dashboard.</p>
      </div>
      )}

    </div>
  </div>

  <script>
    // ===== SISTEMA DE ESTADO DE VENDEDOR =====
    (async () => {
      const SELLER_ID = 's1'; // Carnes del Zulia

      async function fetchStatus() {
        const list = await fetch('/api/sellers/status').then(r => r.json());
        return list.find(x => x.id === SELLER_ID);
      }

      async function refreshBadge() {
        const me = await fetchStatus();
        if (!me) return;
        
        const statusLabel = document.getElementById('status-label');
        const btn = document.getElementById('btn-toggle');
        
        if (!statusLabel || !btn) return;

        statusLabel.textContent =
          me.available ? 'Estado: Disponible (Abierto + Activo)' :
          (me.online ? 'Estado: Activo (fuera de horario)' :
          (me.open ? 'Estado: Abierto (en Descanso)' : 'Estado: Cerrado'));

        btn.textContent = me.online ? 'Poner en Descanso' : 'Poner en Activo';
        btn.className = me.online 
          ? 'px-3 py-1 rounded bg-red-600 text-white hover:bg-red-700 transition-colors'
          : 'px-3 py-1 rounded bg-emerald-600 text-white hover:bg-emerald-700 transition-colors';
      }

      const btnToggle = document.getElementById('btn-toggle');
      if (btnToggle) {
        btnToggle.addEventListener('click', async () => {
          const me = await fetchStatus();
          const next = !(me?.online);
          await fetch('/api/seller/status', {
            method: 'POST', 
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ online: next })
          });
          await refreshBadge();
        });
      }

      await refreshBadge();
      setInterval(refreshBadge, 45000); // refresco cada 45s
    })();

    // ===== SISTEMA DE INVENTARIO =====
    const searchGlobal = document.getElementById('search-global');
    const filterCategory = document.getElementById('filter-category');
    const initialStock = document.getElementById('initial-stock');
    const searchResults = document.getElementById('search-results');
    const inventoryTable = document.getElementById('inventory-table');

    async function searchGlobalProducts() {
      const query = (searchGlobal as HTMLInputElement)?.value || '';
      const category = (filterCategory as HTMLSelectElement)?.value || '';
      
      if (query.length < 2 && !category) {
        searchResults.innerHTML = '<p class="p-4 text-gray-500 text-center">Busca productos para agregar a tu inventario</p>';
        return;
      }

      const params = new URLSearchParams();
      if (query) params.set('q', query);
      if (category) params.set('category', category);

      try {
        const response = await fetch(`/api/products/global?${params}`);
        const products = await response.json();

        searchResults.innerHTML = '';
        if (products.length === 0) {
          searchResults.innerHTML = '<p class="p-4 text-gray-500 text-center">No se encontraron productos.</p>';
          return;
        }

        products.forEach(p => {
          const div = document.createElement('div');
          div.className = 'p-3 hover:bg-gray-100 cursor-pointer border-b last:border-b-0 flex justify-between items-center';
          div.innerHTML = `
            <div>
              <div class="font-medium">${p.title}</div>
              <div class="text-sm text-gray-500">${p.category} ‚Ä¢ $${(p.priceCents / 100).toFixed(0)}</div>
            </div>
            <button class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700" data-product-id="${p.id}">
              Agregar
            </button>
          `;
          searchResults.appendChild(div);
        });
      } catch (error) {
        console.error('Error searching products:', error);
        searchResults.innerHTML = '<p class="p-4 text-red-500 text-center">Error al buscar productos</p>';
      }
    }

    searchGlobal?.addEventListener('input', debounce(searchGlobalProducts, 300));
    filterCategory?.addEventListener('change', searchGlobalProducts);

    searchResults?.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement;
      if (target.dataset.productId) {
        const productId = target.dataset.productId;
        const stock = Number((initialStock as HTMLInputElement)?.value || 1);
        
        try {
          const response = await fetch('/api/seller/inventory/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, stock })
          });

          if (response.ok) {
            alert('Producto agregado al inventario');
            location.reload(); // Recargar para mostrar el nuevo producto
          } else {
            alert('Error al agregar el producto');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al agregar el producto');
        }
      }
    });

    // ===== ACTUALIZACI√ìN DE INVENTARIO =====
    inventoryTable?.addEventListener('change', async (e) => {
      const target = e.target as HTMLInputElement;
      const id = target.dataset.id;
      const field = target.dataset.field;

      if (id && field) {
        let value: string | boolean | number = target.value;
        if (field === 'active') {
          value = target.checked;
        } else if (field === 'stock') {
          value = Number(target.value);
        }
        
        try {
          const response = await fetch('/api/seller/inventory/update', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ sellerProductId: id, [field]: value })
          });

          if (!response.ok) {
            alert('Error al actualizar el inventario');
            location.reload(); // Recargar para restaurar valores
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al actualizar el inventario');
          location.reload();
        }
      }
    });

    inventoryTable?.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement;
      if (target.dataset.action === 'delete' && target.dataset.id) {
        if (confirm('¬øEst√°s seguro de que quieres eliminar este producto de tu inventario?')) {
          try {
            const response = await fetch('/api/seller/inventory/remove', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ sellerProductId: target.dataset.id })
            });

            if (response.ok) {
              location.reload(); // Recargar para actualizar la tabla
          } else {
              alert('Error al eliminar el producto');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el producto');
          }
        }
      }
    });

    // ===== CARGAR STATS =====
    async function loadStats() {
      try {
        const response = await fetch('/api/seller/stats');
        const stats = await response.json();

        // Actualizar KPIs
        document.getElementById('today-count')!.textContent = stats.todayCount.toString();
        document.getElementById('today-total')!.textContent = `$${(stats.todayTotalCents / 100).toFixed(0)}`;
        document.getElementById('week-count')!.textContent = stats.weekCount.toString();
        document.getElementById('week-total')!.textContent = `$${(stats.weekTotalCents / 100).toFixed(0)}`;
        document.getElementById('low-stock-count')!.textContent = stats.lowStock.length.toString();
        document.getElementById('customers-count')!.textContent = stats.customers.length.toString();

        // Top Products
        const topProductsDiv = document.getElementById('top-products');
        if (stats.topProducts.length === 0) {
          topProductsDiv!.innerHTML = '<p class="text-gray-500 text-sm">No hay ventas en los √∫ltimos 7 d√≠as</p>';
        } else {
          topProductsDiv!.innerHTML = stats.topProducts.map((p: any) => `
            <div class="flex justify-between items-center p-2 bg-gray-50 rounded">
              <span class="text-sm font-medium">${p.title}</span>
              <span class="text-sm text-gray-600">${p.count} vendidos</span>
                </div>
          `).join('');
        }

        // Low Stock
        const lowStockDiv = document.getElementById('low-stock-list');
        if (stats.lowStock.length === 0) {
          lowStockDiv!.innerHTML = '<p class="text-green-600 text-sm">‚úÖ Todo el stock est√° bien</p>';
        } else {
          lowStockDiv!.innerHTML = stats.lowStock.map((item: any) => `
            <div class="flex justify-between items-center p-2 bg-orange-50 rounded">
              <span class="text-sm font-medium">${item.title}</span>
              <span class="text-sm text-orange-600 font-bold">${item.stock} unidades</span>
              </div>
            `).join('');
        }

        // Customers
        const customersDiv = document.getElementById('customers-list');
        if (stats.customers.length === 0) {
          customersDiv!.innerHTML = '<p class="text-gray-500 text-sm">No hay clientes recientes</p>';
          } else {
          customersDiv!.innerHTML = stats.customers.map((c: any) => `
            <div class="flex justify-between items-center p-2 bg-gray-50 rounded">
              <div>
                <span class="text-sm font-medium">${c.buyerName}</span>
                ${c.buyerPhone ? `<span class="text-xs text-gray-500 ml-2">${c.buyerPhone}</span>` : ''}
              </div>
              <span class="text-sm text-gray-600">${c.orders} pedidos</span>
            </div>
          `).join('');
        }

      } catch (error) {
        console.error('Error loading stats:', error);
      }
    }

    // Cargar stats al inicio
    loadStats();

    // ===== UTILIDADES =====
    function debounce(func: Function, delay: number) {
      let timeout: NodeJS.Timeout;
      return function(...args: any[]) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
      };
    }
  </script>
</BaseLayout>