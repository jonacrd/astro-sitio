---
import BaseLayout from '@/layouts/BaseLayout.astro'
import HowItWorks from '@/components/react/HowItWorks.tsx'
import PopularProducts from '@/components/react/PopularProducts.tsx'
import CategoryBanners from '@/components/react/CategoryBanners.tsx'
import InfiniteFeed from '@/components/react/InfiniteFeed.tsx'
---

<style>
  /* Estilos para carruseles */
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Estilos para feed 9:16 */
  .aspect-9-16 {
    aspect-ratio: 9 / 16;
  }

  /* Contenedor principal */
  .main-container {
    max-width: 1200px;
    margin: 0 auto;
  }
</style>

<BaseLayout 
  title="Town - Compra rápido con IA"
  description="Compra rápido, con IA y descuentos locales - Town"
>
  <div class="main-container">
    <!-- Hero Section with Chat IA -->
    <section class="min-h-[70vh] flex items-center justify-center bg-gradient-to-br from-blue-900 to-green-700 px-4">
      <div class="max-w-6xl w-full">
        <!-- Auth Navigation -->
        <nav class="flex justify-end gap-3 mb-6">
          <button id="btn-login" class="px-4 py-2 rounded-lg bg-white/20 text-white hover:bg-white/30 transition-colors">
            Entrar
          </button>
          <button id="btn-register" class="px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700 transition-colors">
            Registrarse
          </button>
          <a id="link-vender" class="text-sm underline text-white/80 hover:text-white cursor-pointer hidden">
            VENDER
          </a>
          <a href="/dashboard" id="link-dashboard" class="px-4 py-2 rounded-lg bg-indigo-600 text-white hover:bg-indigo-700 transition-colors hidden">
            Dashboard
          </a>
          <button id="btn-logout" class="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors hidden">
            Salir
          </button>
        </nav>

        <!-- Hero Content -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
          <!-- Texto principal -->
          <div class="text-white">
            <h1 class="text-4xl md:text-6xl font-bold mb-4">
              Compra en tu torre
            </h1>
            <p class="text-xl md:text-2xl mb-8 opacity-90">
              Encuentra productos locales, compara precios y recibe en casa
            </p>
            
            <!-- Search Bar -->
            <div class="mb-8">
              <form id="search-form" class="flex gap-2">
                <input 
                  type="text" 
                  id="search-input"
                  placeholder="¿Qué necesitas? Ej: hamburguesa, cerveza, corte de cabello..."
                  class="flex-1 px-4 py-3 rounded-lg text-gray-800 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button 
                  type="submit"
                  class="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg font-medium transition-colors"
                >
                  Buscar
                </button>
              </form>
            </div>
          </div>

          <!-- Chat IA Widget -->
          <div class="flex justify-center">
            <div>
              <div id="myLandbot" style="width: 120%; height: 400px; border: none; border-radius: 8px; overflow: hidden;"></div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Cómo funciona Town -->
    <HowItWorks client:load />

    <!-- Productos Populares -->
    <PopularProducts client:load />

    <!-- Banners por Categoría -->
    <CategoryBanners client:load />

    <!-- Feed Infinito -->
    <InfiniteFeed client:load />

  <!-- Modales de autenticación -->
  <dialog id="dlg-login" class="backdrop:bg-black/50 bg-white rounded-lg p-6 max-w-md w-full">
    <form id="form-login" class="space-y-4">
      <h3 class="text-lg font-bold">Iniciar Sesión</h3>
      <input name="phone" type="tel" placeholder="Teléfono" required class="w-full p-2 border rounded" />
      <input name="password" type="password" placeholder="Contraseña" required class="w-full p-2 border rounded" />
      <div class="flex gap-2">
        <button type="submit" class="flex-1 bg-blue-600 text-white p-2 rounded">Entrar</button>
        <button type="button" id="close-login" class="px-4 py-2 border rounded">Cancelar</button>
      </div>
    </form>
  </dialog>

  <dialog id="dlg-register" class="backdrop:bg-black/50 bg-white rounded-lg p-6 max-w-md w-full">
    <form id="form-register" class="space-y-4">
      <h3 class="text-lg font-bold">Registrarse</h3>
      <input name="name" type="text" placeholder="Nombre completo" required class="w-full p-2 border rounded" />
      <input name="phone" type="tel" placeholder="Teléfono" required class="w-full p-2 border rounded" />
      <input name="password" type="password" placeholder="Contraseña" required class="w-full p-2 border rounded" />
      <div class="flex gap-2">
        <button type="submit" class="flex-1 bg-green-600 text-white p-2 rounded">Registrarse</button>
        <button type="button" id="close-register" class="px-4 py-2 border rounded">Cancelar</button>
      </div>
    </form>
  </dialog>

  <dialog id="dlg-vender" class="backdrop:bg-black/50 bg-white rounded-lg p-6 max-w-md w-full">
    <form id="form-vender" class="space-y-4">
      <h3 class="text-lg font-bold">Registrarse como Vendedor</h3>
      <input name="name" type="text" placeholder="Nombre completo" required class="w-full p-2 border rounded" />
      <input name="phone" type="tel" placeholder="Teléfono" required class="w-full p-2 border rounded" />
      <input name="password" type="password" placeholder="Contraseña" required class="w-full p-2 border rounded" />
      <input name="storeName" type="text" placeholder="Nombre de la tienda" required class="w-full p-2 border rounded" />
      <input name="addressLine1" type="text" placeholder="Dirección" required class="w-full p-2 border rounded" />
      <input name="comuna" type="text" placeholder="Comuna" required class="w-full p-2 border rounded" />
      <input name="ciudad" type="text" placeholder="Ciudad" required class="w-full p-2 border rounded" />
      <div class="flex gap-2">
        <button type="submit" class="flex-1 bg-indigo-600 text-white p-2 rounded">Registrarse</button>
        <button type="button" id="close-vender" class="px-4 py-2 border rounded">Cancelar</button>
      </div>
    </form>
  </dialog>

</BaseLayout>

<script>
  // Elementos del DOM
  const btnLogin = document.getElementById('btn-login');
  const btnRegister = document.getElementById('btn-register');
  const btnLogout = document.getElementById('btn-logout');
  const linkVender = document.getElementById('link-vender');
  const linkDash = document.getElementById('link-dashboard');
  
  const dlgLogin = document.getElementById('dlg-login') as HTMLDialogElement;
  const dlgRegister = document.getElementById('dlg-register') as HTMLDialogElement;
  const dlgVender = document.getElementById('dlg-vender') as HTMLDialogElement;
  
  const formLogin = document.getElementById('form-login') as HTMLFormElement;
  const formRegister = document.getElementById('form-register') as HTMLFormElement;
  const formVender = document.getElementById('form-vender') as HTMLFormElement;

  // Función para refrescar el estado de autenticación
  async function refreshMe() {
    try {
      const r = await fetch('/api/auth/me-universal');
      const user = r.ok ? await r.json() : null;
      
      if (user) {
        btnLogin?.classList.add('hidden');
        btnRegister?.classList.add('hidden');
        linkVender?.classList.add('hidden');
        btnLogout?.classList.remove('hidden');
        linkDash?.classList.remove('hidden');
      } else {
        btnLogin?.classList.remove('hidden');
        btnRegister?.classList.remove('hidden');
        linkVender?.classList.remove('hidden');
        btnLogout?.classList.add('hidden');
        linkDash?.classList.add('hidden');
      }
    } catch (error) {
      console.error('Error checking auth:', error);
    }
  }

  // Event listeners para botones
  btnLogin?.addEventListener('click', () => dlgLogin?.showModal());
  btnRegister?.addEventListener('click', () => dlgRegister?.showModal());
  linkVender?.addEventListener('click', () => dlgVender?.showModal());

  // Cerrar modales
  document.getElementById('close-login')?.addEventListener('click', () => dlgLogin?.close());
  document.getElementById('close-register')?.addEventListener('click', () => dlgRegister?.close());
  document.getElementById('close-vender')?.addEventListener('click', () => dlgVender?.close());

  // Cerrar modales al hacer clic fuera
  dlgLogin?.addEventListener('click', (e) => {
    if (e.target === dlgLogin) dlgLogin.close();
  });
  dlgRegister?.addEventListener('click', (e) => {
    if (e.target === dlgRegister) dlgRegister.close();
  });
  dlgVender?.addEventListener('click', (e) => {
    if (e.target === dlgVender) dlgVender.close();
  });

  // Formulario de login
  formLogin?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const body = Object.fromEntries(new FormData(e.target as HTMLFormElement).entries());
    
    try {
      const r = await fetch('/api/auth/login-universal', { 
        method: 'POST', 
        headers: { 'content-type': 'application/json' }, 
        body: JSON.stringify(body) 
      });
      
      if (r.ok) { 
        dlgLogin?.close(); 
        refreshMe(); 
      } else { 
        alert('Credenciales incorrectas'); 
      }
    } catch (error) {
      alert('Error al iniciar sesión');
    }
  });

  // Formulario de registro
  formRegister?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const body = Object.fromEntries(new FormData(e.target as HTMLFormElement).entries());
    
    try {
      const r = await fetch('/api/auth/register-universal', { 
        method: 'POST', 
        headers: { 'content-type': 'application/json' }, 
        body: JSON.stringify(body) 
      });
      
      if (r.ok) { 
        dlgRegister?.close(); 
        refreshMe(); 
      } else { 
        alert('No se pudo registrar. El teléfono ya está en uso.'); 
      }
    } catch (error) {
      alert('Error al registrarse');
    }
  });

  // Formulario de vendedor
  formVender?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const body = Object.fromEntries(new FormData(e.target as HTMLFormElement).entries());
    
    try {
      const r = await fetch('/api/seller/profile', { 
        method: 'POST', 
        headers: { 'content-type': 'application/json' }, 
        body: JSON.stringify(body) 
      });
      
      if (r.ok) { 
        dlgVender?.close(); 
        location.href = '/dashboard';
      } else { 
        alert('Completa todos los campos requeridos.'); 
      }
    } catch (error) {
      alert('Error al registrarse como vendedor');
    }
  });

  // Logout
  btnLogout?.addEventListener('click', async () => {
    try {
      await fetch('/api/auth/logout', { method: 'POST' }); 
      refreshMe(); 
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
    }
  });

  // Inicializar
  refreshMe();
</script>

    <!-- Landbot Script -->
    <script type="module" src="https://cdn.landbot.io/landbot-3/landbot-3.0.0.mjs"></script>
    <script type="module">
      var myLandbot = new Landbot.Container({
        container: '#myLandbot',
        configUrl: 'https://storage.googleapis.com/landbot.online/v3/H-3131692-XMRW5AQKBIILVQQU/index.json',
      });
    </script>

  </div>
</BaseLayout>