---
import BaseLayout from '../layouts/BaseLayout.astro'
import SmartSearchBar from '../components/react/SmartSearchBar.tsx'
import QuickActions from '../components/react/QuickActions.tsx'
import RealGridBlocks from '../components/react/RealGridBlocks.tsx'
import RealProductFeed from '../components/react/RealProductFeed.tsx'
import OptimizedFeed from '../components/react/OptimizedFeed.tsx'
import QuestionModal from '../components/react/QuestionModal.tsx'
import SaleModal from '../components/react/SaleModal.tsx'
import BannerSlider from '../components/react/BannerSlider.tsx'
import QuickPushButton from '../components/react/QuickPushButton.tsx'
import QuestionsSystemWrapper from '../components/react/QuestionsSystemWrapper.tsx'
import { supabase } from '../lib/supabase-browser'
---

<BaseLayout 
  title="Town - Feed Social de Compras"
  description="Descubre productos locales en un feed tipo red social - Town"
>
  <link rel="stylesheet" href="/src/styles/feed-animations.css" />
  <div class="min-h-screen bg-dark-primary">




    <!-- Banner Slider -->
    <section class="px-4 py-6">
      <div class="max-w-7xl mx-auto">
        <BannerSlider 
          client:load
          images={[
            '/banners/primer_banner.png',
            '/banners/segundo_banner.png',
            '/banners/tercer_banner.png'
          ]}
          interval={5000}
        />
      </div>
    </section>

    <!-- Search Bar Mejorado -->
    <section class="px-4 pb-6">
      <div class="max-w-7xl mx-auto">
        <SmartSearchBar 
          client:load 
          onSearch={(query) => {
            console.log('🔍 Búsqueda realizada:', query);
          }}
          onCategoryClick={(category) => {
            console.log('📂 Categoría seleccionada:', category);
          }}
          onSellerClick={(sellerId) => {
            console.log('🏪 Vendedor seleccionado:', sellerId);
          }}
          placeholder="¿Qué necesitas? Ej: cerveza, hamburguesa, corte de cabello..."
        />
      </div>
    </section>

    <!-- Acciones Rápidas -->
    <QuickActions 
      client:load 
      onAskQuestion={async () => {
        console.log('🔘 Botón "Haz una pregunta" clickeado');
        alert('Botón clickeado - revisa la consola');
        
        // Verificar si el usuario está autenticado
        try {
          const { data: { session } } = await supabase.auth.getSession();
          console.log('🔍 Sesión obtenida:', session);
          if (session) {
            console.log('✅ Usuario autenticado, abriendo sistema de preguntas');
            // Abrir sistema de preguntas del vecindario
            window.dispatchEvent(new CustomEvent('open-questions-system'));
            console.log('📡 Evento "open-questions-system" disparado');
          } else {
            console.log('❌ Usuario no autenticado, abriendo modal de login');
            // Abrir modal de login
            window.dispatchEvent(new CustomEvent('show-login-modal', { 
              detail: { mode: 'login' } 
            }));
            console.log('📡 Evento "show-login-modal" disparado');
          }
        } catch (error) {
          console.error('Error verificando autenticación:', error);
          // En caso de error, abrir modal de login
          window.dispatchEvent(new CustomEvent('show-login-modal', { 
            detail: { mode: 'login' } 
          }));
          console.log('📡 Evento "show-login-modal" disparado (error)');
        }
      }}
      onPublishSale={() => {
        document.getElementById('sale-modal')?.click();
      }}
    />

        <!-- Grid Dinámico de 4 Bloques - DATOS REALES -->
        <RealGridBlocks 
          client:load 
          onAddToCart={(productId) => {
            console.log('Add to cart:', productId);
            // TODO: Implementar añadir al carrito
          }}
          onViewProduct={(productId) => {
            console.log('View product:', productId);
            // TODO: Implementar ver producto
          }}
          onContactService={(serviceId) => {
            console.log('Contact service:', serviceId);
            // TODO: Implementar contacto con servicio
          }}
        />

    <!-- Feed Principal Categorizado - DATOS REALES -->
    <main class="pb-20 px-4">
      <div class="max-w-7xl mx-auto">
        <OptimizedFeed 
          client:load 
          className=""
        />
      </div>
    </main>

    <!-- Modales -->
    <QuestionModal 
      client:load 
      isOpen={false}
      onClose={() => {}}
      onSubmit={(question) => {
        console.log('Question submitted:', question);
        // TODO: Implementar envío de pregunta
      }}
    />

    <SaleModal 
      client:load 
      isOpen={false}
      onClose={() => {}}
      onSubmit={(sale) => {
        console.log('Sale submitted:', sale);
        // TODO: Implementar envío de venta
      }}
    />

  </div>
</BaseLayout>

<script>
  // Lógica para abrir modales y manejar carrito
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Feed Social de Compras cargado');
    
    // Inicializar carrito vacío si no existe
    if (!localStorage.getItem('cart')) {
      localStorage.setItem('cart', '[]');
    }
    
    // Escuchar eventos de actualización del carrito
    window.addEventListener('cart-updated', (event) => {
      console.log('🛒 Carrito actualizado:', event.detail);
      
      // Actualizar contador en el header
      const cart = JSON.parse(localStorage.getItem('cart') || '[]');
      const totalItems = cart.reduce((sum, item) => sum + (item.quantity || 1), 0);
      
      // Buscar y actualizar contador en el header
      const cartCountElements = document.querySelectorAll('[data-cart-count], .cart-count, .cart-badge');
      cartCountElements.forEach(element => {
        element.textContent = totalItems.toString();
        element.style.display = totalItems > 0 ? 'block' : 'none';
      });
      
      console.log(`📊 Carrito actual: ${totalItems} items total`);
      console.log('🛒 Items en carrito:', cart);
    });
  });
</script>

<!-- Botón flotante de notificaciones -->
<QuickPushButton client:load />

<!-- Sistema de Preguntas del Vecindario -->
<QuestionsSystemWrapper client:load />
