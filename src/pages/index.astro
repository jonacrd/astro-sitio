---
import BaseLayout from '@/layouts/BaseLayout.astro'
import SmartSearch from '@/components/react/SmartSearch.tsx'
import DynamicFeed from '@/components/react/DynamicFeed.tsx'
import HowItWorks from '@/components/react/HowItWorks.tsx'
import CategoryCatalog from '@/components/react/CategoryCatalog.tsx'
import ProfileButton from '@/components/react/ProfileButton.tsx'
---

<style>
  /* Estilos para carruseles */
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Estilos para feed 9:16 */
  .aspect-9-16 {
    aspect-ratio: 9 / 16;
  }

  /* Contenedor principal */
  .main-container {
    max-width: 1200px;
    margin: 0 auto;
  }
</style>

<BaseLayout 
  title="Town - Compra rÃ¡pido con IA"
  description="Compra rÃ¡pido, con IA y descuentos locales - Town"
>
  <div class="main-container">
    <!-- Hero Section RediseÃ±ado -->
    <section class="bg-gradient-to-br from-sky-900 via-slate-900 to-slate-900">
      <div class="container mx-auto px-4 py-10 md:py-14">
        <!-- Auth Navigation -->
        <nav class="flex justify-end gap-3 mb-8">
          <button id="btn-login" class="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-white border border-white/20 transition-colors">
            Entrar
          </button>
          <button id="btn-register" class="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors">
            Registrarse
          </button>
          <a id="link-vender" class="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-white border border-white/20 transition-colors hidden">
            Vender
          </a>
          <a href="/dashboard" id="link-dashboard" class="px-4 py-2 rounded-lg bg-indigo-600 text-white hover:bg-indigo-700 transition-colors hidden">
            Dashboard
          </a>
          <button id="btn-logout" class="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700 transition-colors hidden">
            Salir
          </button>
          <button id="btn-refresh" class="px-2 py-1 rounded bg-yellow-600 text-white text-xs hover:bg-yellow-700 transition-colors">
            ðŸ”„
          </button>
        </nav>

        <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 items-start">
          <!-- Columna izquierda: TITULAR grande -->
          <div class="lg:col-span-5 max-w-screen-md">
            <h1 class="text-4xl md:text-5xl font-extrabold tracking-tight text-white">
              Compra en tu torre
            </h1>
            <p class="mt-3 text-white/85 md:text-lg leading-relaxed">
              Encuentra productos locales, compara precios y recibe en casa
            </p>
          </div>

          <!-- Columna derecha: Barra IA -->
          <div class="lg:col-span-7">
            <h2 class="text-2xl md:text-3xl font-bold text-white">Busca productos cerca â€” con tus vendedores de siempre</h2>
            
            <!-- Barra IA -->
            <div class="mt-6">
              <SmartSearch client:load />
            </div>
          </div>
        </div>

        <!-- Resultados bajo el hero -->
        <!-- SmartSearch ya estÃ¡ en el hero, no duplicar -->
      </div>
    </section>

    <!-- CÃ³mo funciona Town -->
    <HowItWorks client:load />

    <!-- Feed DinÃ¡mico con Productos Reales -->
    <section class="py-12 bg-gray-50">
      <div class="container mx-auto px-4">
        <DynamicFeed client:load />
      </div>
    </section>

    <!-- CatÃ¡logo por CategorÃ­as -->
    <section class="py-12 bg-white">
      <div class="container mx-auto px-4">
        <CategoryCatalog client:load />
      </div>
    </section>

    <!-- BotÃ³n de Perfil Flotante -->
    <ProfileButton client:load />

  <!-- Modales de autenticaciÃ³n -->
  <dialog id="dlg-login" class="backdrop:bg-black/50 bg-white rounded-lg p-6 max-w-md w-full">
    <form id="form-login" class="space-y-4">
      <h3 class="text-lg font-bold">Iniciar SesiÃ³n</h3>
      <input name="email" type="email" placeholder="Email" required class="w-full p-2 border rounded" />
      <input name="password" type="password" placeholder="ContraseÃ±a" required class="w-full p-2 border rounded" />
      <div class="flex gap-2">
        <button type="submit" class="flex-1 bg-blue-600 text-white p-2 rounded">Entrar</button>
        <button type="button" id="close-login" class="px-4 py-2 border rounded">Cancelar</button>
      </div>
    </form>
  </dialog>

  <dialog id="dlg-register" class="backdrop:bg-black/50 bg-white rounded-lg p-6 max-w-md w-full">
    <form id="form-register" class="space-y-4">
      <h3 class="text-lg font-bold">Crear Cuenta</h3>
      <input name="email" type="email" placeholder="Email" required class="w-full p-2 border rounded" />
      <input name="password" type="password" placeholder="ContraseÃ±a" required class="w-full p-2 border rounded" />
      <div class="flex gap-2">
        <button type="submit" class="flex-1 bg-green-600 text-white p-2 rounded">Registrarse</button>
        <button type="button" id="close-register" class="px-4 py-2 border rounded">Cancelar</button>
      </div>
    </form>
  </dialog>

  <dialog id="dlg-vender" class="backdrop:bg-black/50 bg-white rounded-lg p-6 max-w-md w-full">
    <form id="form-vender" class="space-y-4">
      <h3 class="text-lg font-bold">Registrarse como Vendedor</h3>
      <input name="name" type="text" placeholder="Nombre completo" required class="w-full p-2 border rounded" />
      <input name="email" type="email" placeholder="Email" required class="w-full p-2 border rounded" />
      <input name="password" type="password" placeholder="ContraseÃ±a" required class="w-full p-2 border rounded" />
      <input name="storeName" type="text" placeholder="Nombre de la tienda" required class="w-full p-2 border rounded" />
      <input name="addressLine1" type="text" placeholder="DirecciÃ³n" required class="w-full p-2 border rounded" />
      <input name="comuna" type="text" placeholder="Comuna" required class="w-full p-2 border rounded" />
      <input name="ciudad" type="text" placeholder="Ciudad" required class="w-full p-2 border rounded" />
      <div class="flex gap-2">
        <button type="submit" class="flex-1 bg-indigo-600 text-white p-2 rounded">Registrarse</button>
        <button type="button" id="close-vender" class="px-4 py-2 border rounded">Cancelar</button>
      </div>
    </form>
  </dialog>

</BaseLayout>

<script>
  // Elementos del DOM
  const btnLogin = document.getElementById('btn-login');
  const btnRegister = document.getElementById('btn-register');
  const btnLogout = document.getElementById('btn-logout');
  const btnRefresh = document.getElementById('btn-refresh');
  const linkVender = document.getElementById('link-vender');
  const linkDash = document.getElementById('link-dashboard');
  
  const dlgLogin = document.getElementById('dlg-login') as HTMLDialogElement;
  const dlgRegister = document.getElementById('dlg-register') as HTMLDialogElement;
  const dlgVender = document.getElementById('dlg-vender') as HTMLDialogElement;
  
  const formLogin = document.getElementById('form-login') as HTMLFormElement;
  const formRegister = document.getElementById('form-register') as HTMLFormElement;
  const formVender = document.getElementById('form-vender') as HTMLFormElement;

  // FunciÃ³n para refrescar el estado de autenticaciÃ³n con Supabase
  async function refreshMe() {
    try {
      // Importar dinÃ¡micamente Supabase para evitar problemas de SSR
      const { supabase } = await import('../lib/supabase-browser');
      
      const { data: { user }, error } = await supabase.auth.getUser();
      
      if (error) {
        console.error('Supabase auth error:', error);
        showLoggedOutState();
        return;
      }
      
      if (user) {
        // Verificar si el usuario tiene perfil completo
        const { data: profile } = await supabase
          .from('profiles')
          .select('name, phone, is_seller')
          .eq('id', user.id)
          .single();

        console.log('Auth state:', `Logged in as ${user.email}`, profile);

        // Usuario logueado - mostrar logout y opciones apropiadas
        btnLogin?.classList.add('hidden');
        btnRegister?.classList.add('hidden');
        btnLogout?.classList.remove('hidden');

        if (!profile?.name || !profile?.phone) {
          // Perfil incompleto - mostrar botÃ³n para completar
          linkDash?.classList.add('hidden');
          linkVender?.classList.add('hidden');
          showCompleteProfileButton();
        } else if (profile.is_seller) {
          // Es vendedor - mostrar perfil con acceso al dashboard
          linkDash?.classList.remove('hidden');
          linkVender?.classList.add('hidden');
          linkDash.textContent = 'Mi Perfil';
          linkDash.href = '/perfil';
        } else {
          // Usuario normal - mostrar opciones
          linkDash?.classList.remove('hidden');
          linkVender?.classList.remove('hidden');
          linkDash.textContent = 'Mi Perfil';
          linkDash.href = '/perfil';
          linkVender.textContent = 'VENDER';
          linkVender.href = '/upgrade-seller';
        }
      } else {
        showLoggedOutState();
      }
    } catch (error) {
      console.error('Error checking auth:', error);
      showLoggedOutState();
    }
  }

  function showCompleteProfileButton() {
    // Crear botÃ³n temporal para completar perfil
    const existingBtn = document.getElementById('btn-complete-profile');
    if (existingBtn) return;

    const completeBtn = document.createElement('button');
    completeBtn.id = 'btn-complete-profile';
    completeBtn.textContent = 'Completar Perfil';
    completeBtn.className = 'px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors';
    completeBtn.onclick = () => window.location.href = '/complete-profile';

    // Insertar despuÃ©s del botÃ³n de logout
    btnLogout?.parentNode?.insertBefore(completeBtn, btnLogout.nextSibling);
  }

  function showLoggedOutState() {
    btnLogin?.classList.remove('hidden');
    btnRegister?.classList.remove('hidden');
    linkVender?.classList.remove('hidden');
    btnLogout?.classList.add('hidden');
    linkDash?.classList.add('hidden');
  }

  // Event listeners para botones
  btnLogin?.addEventListener('click', () => dlgLogin?.showModal());
  btnRegister?.addEventListener('click', () => dlgRegister?.showModal());
  btnRefresh?.addEventListener('click', () => {
    console.log('Manual refresh clicked');
    refreshMe();
  });
  linkVender?.addEventListener('click', () => dlgVender?.showModal());

  // Cerrar modales
  document.getElementById('close-login')?.addEventListener('click', () => dlgLogin?.close());
  document.getElementById('close-register')?.addEventListener('click', () => dlgRegister?.close());
  document.getElementById('close-vender')?.addEventListener('click', () => dlgVender?.close());

  // Cerrar modales al hacer clic fuera
  dlgLogin?.addEventListener('click', (e) => {
    if (e.target === dlgLogin) dlgLogin.close();
  });
  dlgRegister?.addEventListener('click', (e) => {
    if (e.target === dlgRegister) dlgRegister.close();
  });
  dlgVender?.addEventListener('click', (e) => {
    if (e.target === dlgVender) dlgVender.close();
  });

  // Formulario de login con Supabase
  formLogin?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    
    try {
      const { supabase } = await import('../lib/supabase-browser');
      
      const { data, error } = await supabase.auth.signInWithPassword({ 
        email, 
        password 
      });
      
      if (error) {
        alert('Credenciales incorrectas: ' + error.message);
        return;
      }
      
      if (data.user) {
        dlgLogin?.close();
        refreshMe();
      }
    } catch (error) {
      console.error('Login error:', error);
      alert('Error al iniciar sesiÃ³n');
    }
  });

  // Formulario de registro con Supabase
  formRegister?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    
    try {
      const { supabase } = await import('../lib/supabase-browser');
      
      const { data, error } = await supabase.auth.signUp({ 
        email, 
        password,
        options: { 
          emailRedirectTo: window.location.origin
        }
      });
      
      if (error) {
        alert('Error al registrarse: ' + error.message);
        return;
      }
      
      if (data.user) {
        dlgRegister?.close();
        alert('Â¡Registro exitoso! Ahora completa tu perfil.');
        window.location.href = '/complete-profile';
      }
    } catch (error) {
      console.error('Register error:', error);
      alert('Error al registrarse');
    }
  });

  // Formulario de vendedor
  formVender?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const body = Object.fromEntries(new FormData(e.target as HTMLFormElement).entries());
    
    try {
      const r = await fetch('/api/seller/profile', { 
        method: 'POST', 
        headers: { 'content-type': 'application/json' }, 
        body: JSON.stringify(body) 
      });
      
      if (r.ok) { 
        dlgVender?.close(); 
        location.href = '/dashboard';
      } else { 
        alert('Completa todos los campos requeridos.'); 
      }
    } catch (error) {
      alert('Error al registrarse como vendedor');
    }
  });

  // Logout con Supabase
  btnLogout?.addEventListener('click', async () => {
    console.log('Logout clicked');
    try {
      const { supabase } = await import('../lib/supabase-browser');
      
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('Logout error:', error);
      } else {
        console.log('Logout successful');
      }
      
      // Refrescar el estado de autenticaciÃ³n
      refreshMe();
    } catch (error) {
      console.error('Error al cerrar sesiÃ³n:', error);
      // AÃºn asÃ­ intentar refreshMe
      refreshMe();
    }
  });

  // Inicializar
  refreshMe();
</script>


  </div>
</BaseLayout>