---
import BaseLayout from '../layouts/BaseLayout.astro'
import BuyerOrderActions from '../components/react/BuyerOrderActions.tsx'
import { getUser, getUserProfile } from '../lib/session'
---

<BaseLayout title="Mis Pedidos">
  <main class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Mis Pedidos</h1>
        <p class="text-gray-600">Gestiona tus pedidos y confirmaciones</p>
      </div>

      <div class="space-y-6">
        <!-- Aquí se cargarán los pedidos del comprador -->
        <div id="orders-container">
          <div class="text-center py-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Cargando pedidos...</p>
          </div>
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  import { supabase } from '../lib/supabase-browser';

  async function loadBuyerOrders() {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        document.getElementById('orders-container').innerHTML = `
          <div class="text-center py-8">
            <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md max-w-md mx-auto">
              <h3 class="font-semibold mb-2">No hay usuario autenticado</h3>
              <p class="text-sm">Por favor, inicia sesión para ver tus pedidos</p>
            </div>
          </div>
        `;
        return;
      }

      // Consultar pedidos del comprador
      const { data, error } = await supabase
        .from('orders')
        .select(`
          id,
          total_cents,
          status,
          created_at
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      const ordersContainer = document.getElementById('orders-container');
      
      if (!data || data.length === 0) {
        ordersContainer.innerHTML = `
          <div class="text-center py-8">
            <div class="bg-gray-50 border border-gray-200 text-gray-700 px-4 py-3 rounded-md max-w-md mx-auto">
              <h3 class="font-semibold mb-2">No tienes pedidos</h3>
              <p class="text-sm">Cuando hagas un pedido, aparecerá aquí</p>
            </div>
          </div>
        `;
        return;
      }

      // Renderizar pedidos
      ordersContainer.innerHTML = data.map(order => `
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex items-center justify-between mb-4">
            <div>
              <h3 class="font-semibold text-gray-900">
                Pedido #${order.id.substring(0, 8)}
              </h3>
              <p class="text-sm text-gray-600">
                ${new Date(order.created_at).toLocaleString('es-ES')}
              </p>
            </div>
            <div class="text-right">
              <div class="text-2xl font-bold text-blue-600">
                $${(order.total_cents / 100).toFixed(2)}
              </div>
            </div>
          </div>

          <div class="mb-4">
            <p class="text-sm font-medium ${getStatusColor(order.status)}">
              ${getStatusMessage(order.status)}
            </p>
          </div>

          <div class="flex space-x-2">
            ${getStatusActions(order)}
          </div>
        </div>
      `).join('');

    } catch (err) {
      console.error('Error cargando pedidos:', err);
      document.getElementById('orders-container').innerHTML = `
        <div class="text-center py-8">
          <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md max-w-md mx-auto">
            <h3 class="font-semibold mb-2">Error cargando pedidos</h3>
            <p class="text-sm">${err.message}</p>
            <button 
              onclick="loadBuyerOrders()"
              class="mt-3 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
            >
              Reintentar
            </button>
          </div>
        </div>
      `;
    }
  }

  function getStatusMessage(status) {
    switch (status) {
      case 'pending':
        return 'Tu pedido está pendiente de confirmación por el vendedor';
      case 'confirmed':
        return 'Tu pedido ha sido confirmado y está en preparación';
      case 'delivered':
        return 'Tu pedido ha sido entregado. Por favor, confirma la recepción';
      case 'completed':
        return 'Pedido completado exitosamente';
      case 'cancelled':
        return 'Pedido cancelado';
      default:
        return 'Estado desconocido';
    }
  }

  function getStatusColor(status) {
    switch (status) {
      case 'pending':
        return 'text-yellow-600';
      case 'confirmed':
        return 'text-blue-600';
      case 'delivered':
        return 'text-green-600';
      case 'completed':
        return 'text-gray-600';
      case 'cancelled':
        return 'text-red-600';
      default:
        return 'text-gray-600';
    }
  }

  function getStatusActions(order) {
    switch (order.status) {
      case 'delivered':
        return `
          <button
            onclick="confirmReceipt('${order.id}')"
            class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
          >
            Confirmar Recepción
          </button>
        `;
      case 'pending':
      case 'confirmed':
        return `
          <button
            onclick="cancelOrder('${order.id}')"
            class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
          >
            Cancelar Pedido
          </button>
        `;
      case 'completed':
        return '<span class="text-green-600 font-medium">✅ Pedido completado</span>';
      case 'cancelled':
        return '<span class="text-red-600 font-medium">❌ Pedido cancelado</span>';
      default:
        return '';
    }
  }

  async function confirmReceipt(orderId) {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        alert('No hay usuario autenticado');
        return;
      }

      const { error } = await supabase
        .from('orders')
        .update({ status: 'completed' })
        .eq('id', orderId);

      if (error) throw error;

      alert('¡Recepción confirmada exitosamente!');
      loadBuyerOrders();
    } catch (err) {
      console.error('Error confirmando recepción:', err);
      alert('Error al confirmar recepción: ' + err.message);
    }
  }

  async function cancelOrder(orderId) {
    if (!confirm('¿Estás seguro de que quieres cancelar este pedido?')) {
      return;
    }

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        alert('No hay usuario autenticado');
        return;
      }

      const { error } = await supabase
        .from('orders')
        .update({ status: 'cancelled' })
        .eq('id', orderId);

      if (error) throw error;

      alert('¡Pedido cancelado exitosamente!');
      loadBuyerOrders();
    } catch (err) {
      console.error('Error cancelando pedido:', err);
      alert('Error al cancelar pedido: ' + err.message);
    }
  }

  // Cargar pedidos al cargar la página
  loadBuyerOrders();
</script>
