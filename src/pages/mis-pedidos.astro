---
import BaseLayout from '../layouts/BaseLayout.astro'
import EnhancedOrderCard from '../components/react/EnhancedOrderCard.tsx'
import PointsSummaryCard from '../components/react/PointsSummaryCard.tsx'
import BottomNav from '../components/react/BottomNav.tsx'
import { getUser, getUserProfile } from '../lib/session'
---

<BaseLayout title="Mis Pedidos">
  <main class="min-h-screen bg-gray-50 pb-20">
    <div class="container mx-auto px-4 py-8">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Mis Pedidos</h1>
        <p class="text-gray-600">Gestiona tus pedidos, puntos y recompensas</p>
      </div>

      <!-- Resumen de puntos -->
      <div class="mb-8" id="points-summary-container">
        <PointsSummaryCard client:load userId="" />
      </div>

      <!-- Filtros y opciones -->
      <div class="mb-6">
        <div class="bg-white rounded-lg shadow-sm p-4">
          <div class="flex flex-wrap items-center gap-4">
            <div class="flex items-center gap-2">
              <label class="text-sm font-medium text-gray-700">Filtrar por estado:</label>
              <select id="status-filter" class="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:border-blue-500">
                <option value="">Todos los pedidos</option>
                <option value="placed">üõí Realizados (Pendientes)</option>
                <option value="seller_confirmed">‚úÖ Confirmados por vendedor</option>
                <option value="delivered">üì¶ Entregados</option>
                <option value="completed">üéâ Completados</option>
                <option value="cancelled">‚ùå Cancelados</option>
              </select>
            </div>
            
            <div class="flex items-center gap-2">
              <label class="text-sm font-medium text-gray-700">Mostrar:</label>
              <label class="flex items-center">
                <input type="checkbox" id="show-points" class="mr-2" checked>
                <span class="text-sm text-gray-600">Informaci√≥n de puntos</span>
              </label>
              <label class="flex items-center ml-4">
                <input type="checkbox" id="show-redemption" class="mr-2">
                <span class="text-sm text-gray-600">Opciones de canje</span>
              </label>
            </div>
          </div>
        </div>
      </div>

      <!-- Estad√≠sticas r√°pidas -->
      <div class="mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="bg-white rounded-lg shadow-sm p-4">
            <div class="flex items-center">
              <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium text-gray-600">Total Pedidos</p>
                <p class="text-2xl font-bold text-gray-900" id="total-orders">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm p-4">
            <div class="flex items-center">
              <div class="p-2 bg-green-100 rounded-lg">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium text-gray-600">Puntos Ganados</p>
                <p class="text-2xl font-bold text-gray-900" id="total-points-earned">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm p-4">
            <div class="flex items-center">
              <div class="p-2 bg-yellow-100 rounded-lg">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium text-gray-600">Puntos Disponibles</p>
                <p class="text-2xl font-bold text-gray-900" id="total-points-available">-</p>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-lg shadow-sm p-4">
            <div class="flex items-center">
              <div class="p-2 bg-purple-100 rounded-lg">
                <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm font-medium text-gray-600">Ahorro Total</p>
                <p class="text-2xl font-bold text-gray-900" id="total-savings">-</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="space-y-6">
        <!-- Aqu√≠ se cargar√°n los pedidos del comprador -->
        <div id="orders-container">
          <div class="text-center py-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Cargando pedidos...</p>
          </div>
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  import { supabase } from '../lib/supabase-browser';
  import { createElement } from 'react';
  import { createRoot } from 'react-dom/client';
  import EnhancedOrderCard from '../components/react/EnhancedOrderCard.tsx';
  import PointsSummaryCard from '../components/react/PointsSummaryCard.tsx';

  let currentUser = null;
  let allOrders = [];
  let filteredOrders = [];

  async function loadBuyerOrders() {
    try {
      // Mostrar loading
      const ordersContainer = document.getElementById('orders-container');
      ordersContainer.innerHTML = `
        <div class="text-center py-8">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p class="text-gray-600">Cargando pedidos...</p>
        </div>
      `;

      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        ordersContainer.innerHTML = `
          <div class="text-center py-8">
            <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md max-w-md mx-auto">
              <h3 class="font-semibold mb-2">No hay usuario autenticado</h3>
              <p class="text-sm">Por favor, inicia sesi√≥n para ver tus pedidos</p>
            </div>
          </div>
        `;
        return;
      }

      currentUser = user;
      
      // Actualizar el userId en PointsSummaryCard
      const pointsSummaryContainer = document.getElementById('points-summary-container');
      if (pointsSummaryContainer) {
        pointsSummaryContainer.innerHTML = '';
        const root = createRoot(pointsSummaryContainer);
        root.render(createElement(PointsSummaryCard, { userId: user.id }));
      }

      // Consultar pedidos del comprador con informaci√≥n completa
      console.log('üîç Cargando pedidos para usuario:', user.id);
      
      // Consulta b√°sica primero (sin columnas que pueden no existir)
      let { data, error } = await supabase
        .from('orders')
        .select(`
          id,
          total_cents,
          status,
          payment_method,
          created_at,
          seller_id,
          sellers:profiles!orders_seller_id_fkey(name, phone)
        `)
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error cargando pedidos b√°sicos:', error);
        throw error;
      }

      // Intentar agregar columnas adicionales si existen
      try {
        const { data: extendedData, error: extendedError } = await supabase
          .from('orders')
          .select(`
            id,
            payment_status,
            expires_at,
            points_awarded
          `)
          .eq('user_id', user.id);

        if (!extendedError && extendedData) {
          // Combinar datos b√°sicos con extendidos
          const extendedMap = new Map(extendedData.map(item => [item.id, item]));
          data = data?.map(order => ({
            ...order,
            ...extendedMap.get(order.id)
          })) || [];
        }
      } catch (extendedErr) {
        console.warn('‚ö†Ô∏è No se pudieron cargar columnas extendidas, usando datos b√°sicos:', extendedErr);
        // Continuar con datos b√°sicos
      }

      console.log('üì¶ Pedidos cargados:', data);
      allOrders = data || [];
      filteredOrders = [...allOrders];

      if (allOrders.length === 0) {
        ordersContainer.innerHTML = `
          <div class="text-center py-8">
            <div class="bg-gray-50 border border-gray-200 text-gray-700 px-4 py-3 rounded-md max-w-md mx-auto">
              <h3 class="font-semibold mb-2">No tienes pedidos</h3>
              <p class="text-sm">Cuando hagas un pedido, aparecer√° aqu√≠</p>
              <div class="mt-4">
                <a href="/" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                  Ir a Comprar
                </a>
              </div>
            </div>
          </div>
        `;
        updateStatistics();
        return;
      }

      renderOrders();
      updateStatistics();

    } catch (err) {
      console.error('Error cargando pedidos:', err);
      const ordersContainer = document.getElementById('orders-container');
      ordersContainer.innerHTML = `
        <div class="text-center py-8">
          <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md max-w-md mx-auto">
            <h3 class="font-semibold mb-2">Error cargando pedidos</h3>
            <p class="text-sm">${err.message}</p>
            <button 
              onclick="loadBuyerOrders()" 
              class="mt-3 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
            >
              Reintentar
            </button>
          </div>
        </div>
      `;
    }
  }

  function renderOrders() {
    const ordersContainer = document.getElementById('orders-container');
    const showPoints = document.getElementById('show-points')?.checked ?? true;
    const showRedemption = document.getElementById('show-redemption')?.checked ?? false;

    if (filteredOrders.length === 0) {
      ordersContainer.innerHTML = `
        <div class="text-center py-8">
          <div class="bg-gray-50 border border-gray-200 text-gray-700 px-4 py-3 rounded-md max-w-md mx-auto">
            <h3 class="font-semibold mb-2">No hay pedidos con estos filtros</h3>
            <p class="text-sm">Intenta cambiar los filtros o ver todos los pedidos</p>
          </div>
        </div>
      `;
      return;
    }

    // Limpiar contenedor
    ordersContainer.innerHTML = '';
    
    // Renderizar cada pedido con React
    filteredOrders.forEach(order => {
      const orderDiv = document.createElement('div');
      orderDiv.className = 'mb-6';
      ordersContainer.appendChild(orderDiv);
      
      const root = createRoot(orderDiv);
      root.render(createElement(EnhancedOrderCard, {
        order: order,
        onStatusChange: () => {
          console.log('Estado del pedido actualizado');
          loadBuyerOrders(); // Recargar pedidos
        },
        showPointsInfo: showPoints,
        showRedemption: showRedemption
      }));
    });
  }

  async function updateStatistics() {
    try {
      // Calcular estad√≠sticas b√°sicas
      const totalOrders = allOrders.length;
      const totalPointsEarned = allOrders.reduce((sum, order) => sum + (order.points_awarded || 0), 0);
      
      // Obtener puntos disponibles del usuario (con fallback)
      let totalPointsAvailable = 0;
      if (currentUser) {
        try {
          const { data: userPoints, error: userPointsError } = await supabase
            .from('user_points')
            .select('points')
            .eq('user_id', currentUser.id);
          
          if (!userPointsError && userPoints) {
            totalPointsAvailable = userPoints.reduce((sum, up) => sum + (up.points || 0), 0);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Error obteniendo puntos de usuario:', error);
          // Usar endpoint de API como fallback
          try {
            const response = await fetch(`/api/points/summary?userId=${currentUser.id}`);
            if (response.ok) {
              const data = await response.json();
              if (data.success) {
                totalPointsAvailable = data.summary.reduce((sum, seller) => sum + (seller.total_points || 0), 0);
              }
            }
          } catch (apiError) {
            console.warn('‚ö†Ô∏è Error en API de puntos:', apiError);
          }
        }
      }

      // Obtener ahorro total de redenciones (con fallback)
      let totalSavings = 0;
      if (currentUser) {
        try {
          const { data: redemptions, error: redemptionsError } = await supabase
            .from('point_redemptions')
            .select('discount_cents')
            .eq('user_id', currentUser.id)
            .eq('status', 'applied');
          
          if (!redemptionsError && redemptions) {
            totalSavings = redemptions.reduce((sum, r) => sum + (r.discount_cents || 0), 0);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Error obteniendo redenciones:', error);
        }
      }

      // Actualizar elementos del DOM
      document.getElementById('total-orders').textContent = totalOrders;
      document.getElementById('total-points-earned').textContent = totalPointsEarned;
      document.getElementById('total-points-available').textContent = totalPointsAvailable;
      document.getElementById('total-savings').textContent = `$${Math.floor(totalSavings / 100).toLocaleString('es-CL')}`;
    } catch (error) {
      console.error('Error actualizando estad√≠sticas:', error);
    }
  }

  function applyFilters() {
    const statusFilter = document.getElementById('status-filter')?.value;
    
    if (!statusFilter) {
      filteredOrders = [...allOrders];
    } else {
      filteredOrders = allOrders.filter(order => {
        if (statusFilter === 'cancelled') {
          return order.status.includes('cancelled');
        }
        return order.status === statusFilter;
      });
    }
    
    renderOrders();
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    loadBuyerOrders();
    
    // Filtros
    const statusFilter = document.getElementById('status-filter');
    const showPoints = document.getElementById('show-points');
    const showRedemption = document.getElementById('show-redemption');
    
    if (statusFilter) {
      statusFilter.addEventListener('change', applyFilters);
    }
    
    if (showPoints) {
      showPoints.addEventListener('change', renderOrders);
    }
    
    if (showRedemption) {
      showRedemption.addEventListener('change', renderOrders);
    }
  });

  // Funci√≥n global para recargar pedidos
  window.refreshOrders = loadBuyerOrders;
</script>

<!-- Bottom Navigation -->
<BottomNav client:load role="buyer" notifications={0} orders={0} rewards={0} />