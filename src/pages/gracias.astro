---
import BaseLayout from '@/layouts/BaseLayout.astro'

// Obtener c√≥digo de orden de la URL
const orderCode = Astro.url.searchParams.get('order')

// En modo mock, no tenemos √≥rdenes reales, solo mostramos el c√≥digo
let order = null
if (orderCode) {
  order = {
    orderCode,
    totalCents: 0,
    items: [],
    customerName: '',
    customerEmail: ''
  }
}
---

<BaseLayout 
  title={order ? `Pedido ${order.orderCode} - Confirmaci√≥n` : "Confirmaci√≥n de pedido"}
  description="Tu pedido ha sido procesado exitosamente"
>
  <section class="min-h-screen bg-gradient-to-b from-[#0E1626] to-[#101828] py-12 sm:py-16">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      {order ? (
        <div class="text-center mb-8 sm:mb-12">
          <!-- Icono de √©xito -->
          <div class="bg-green-600 w-20 h-20 sm:w-24 sm:h-24 rounded-full flex items-center justify-center mx-auto mb-4 sm:mb-6">
            <svg class="w-10 h-10 sm:w-12 sm:h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          </div>

          <h1 class="text-2xl sm:text-3xl font-bold text-white mb-3 sm:mb-4">
            ¬°Pedido confirmado!
          </h1>
          <p class="text-base sm:text-lg text-white/70 mb-2">
            Tu pedido ha sido procesado exitosamente
          </p>
          <p class="text-xs sm:text-sm text-white/50">
            C√≥digo de pedido: <span class="font-mono font-bold text-green-400">{order.orderCode}</span>
          </p>
        </div>

        <!-- Detalles del pedido -->
        <div class="bg-[#1D2939] rounded-2xl shadow-lg p-4 sm:p-6 lg:p-8 mb-6 sm:mb-8 ring-1 ring-white/10">
          <h2 class="text-lg sm:text-xl font-bold text-white mb-4 sm:mb-6">Detalles del pedido</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8 mb-6 sm:mb-8">
            <!-- Informaci√≥n del cliente -->
            <div>
              <h3 class="font-semibold text-white/70 mb-3 text-sm sm:text-base">Informaci√≥n de contacto</h3>
              <div class="space-y-2 text-sm text-white/60">
                <p><span class="font-medium text-white">Nombre:</span> <span data-customer-name>{order.customerName || ''}</span></p>
                <p><span class="font-medium text-white">Email:</span> <span data-customer-email>{order.customerEmail || ''}</span></p>
                <p><span class="font-medium text-white">Fecha:</span> {new Date().toLocaleDateString('es-ES')}</p>
              </div>
            </div>

            <!-- Resumen del pedido -->
            <div>
              <h3 class="font-semibold text-white/70 mb-3">Resumen</h3>
              <div class="space-y-2 text-sm">
                <p class="text-white/60"><span class="font-medium text-white">Productos:</span> <span data-products-count>{order.items.length || 0}</span></p>
                <p class="text-white/60"><span class="font-medium text-white">Total:</span> <span class="text-lg font-bold text-green-400" data-total>${(order.totalCents / 100).toFixed(2) || '0.00'}</span></p>
              </div>
            </div>
          </div>

          <!-- Items del pedido -->
          <div>
            <h3 class="font-semibold text-white/70 mb-3 sm:mb-4 text-sm sm:text-base">Productos pedidos</h3>
            <div class="space-y-3 sm:space-y-4" data-products-list>
              <div class="text-center py-8">
                <p class="text-white/50">Los detalles del pedido se est√°n cargando...</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Pr√≥ximos pasos -->
        <div class="bg-blue-500/10 border border-blue-500/20 rounded-2xl p-4 sm:p-6 mb-6 sm:mb-8">
          <h3 class="font-semibold text-blue-300 mb-3 text-sm sm:text-base">¬øQu√© sigue?</h3>
          <ul class="space-y-2 text-blue-200 text-xs sm:text-sm">
            <li class="flex items-start gap-2">
              <span class="text-blue-400 mt-1">üìß</span>
              <span>Te enviaremos una confirmaci√≥n por email con los detalles del pedido</span>
            </li>
            <li class="flex items-start gap-2">
              <span class="text-blue-400 mt-1">üì¶</span>
              <span>Prepararemos tu pedido y te notificaremos cuando est√© listo para env√≠o</span>
            </li>
            <li class="flex items-start gap-2">
              <span class="text-blue-400 mt-1">üöö</span>
              <span>Recibir√°s tu pedido en 2-5 d√≠as h√°biles</span>
            </li>
          </ul>
        </div>

        <!-- Acciones -->
        <div class="text-center space-y-4">
          <div class="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center">
            <a 
              href="/" 
              class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors min-h-11 text-sm sm:text-base"
            >
              Seguir comprando
            </a>
            <button 
              onclick="window.print()" 
              class="border border-white/20 text-white px-6 py-3 rounded-lg hover:bg-white/10 transition-colors min-h-11 text-sm sm:text-base"
            >
              Imprimir pedido
            </button>
          </div>
          
          <p class="text-xs sm:text-sm text-white/50">
            Si tienes alguna pregunta sobre tu pedido, cont√°ctanos a info@tienda.com
          </p>
        </div>
      ) : (
        <!-- Pedido no encontrado -->
        <div class="text-center">
          <div class="bg-red-600 w-20 h-20 sm:w-24 sm:h-24 rounded-full flex items-center justify-center mx-auto mb-4 sm:mb-6">
            <svg class="w-10 h-10 sm:w-12 sm:h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </div>

          <h1 class="text-2xl sm:text-3xl font-bold text-white mb-3 sm:mb-4">
            Pedido no encontrado
          </h1>
          <p class="text-base sm:text-lg text-white/70 mb-6 sm:mb-8">
            No pudimos encontrar el pedido solicitado. Verifica el c√≥digo e intenta nuevamente.
          </p>
          
          <a 
            href="/" 
            class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors min-h-11 text-sm sm:text-base"
          >
            Volver al inicio
          </a>
        </div>
      )}
    </div>
  </section>

  <!-- Script para cargar datos reales del carrito -->
  <script>
    // Cargar datos del carrito desde sessionStorage
    const orderData = sessionStorage.getItem('orderData');
    console.log('üîç Datos del pedido encontrados:', orderData);
    
    if (orderData) {
      try {
        const data = JSON.parse(orderData);
        console.log('üì¶ Datos parseados:', data);
        
        // Actualizar informaci√≥n del cliente
        const customerNameEl = document.querySelector('[data-customer-name]');
        const customerEmailEl = document.querySelector('[data-customer-email]');
        
        if (customerNameEl) {
          customerNameEl.textContent = data.customerName || '';
          console.log('üë§ Nombre actualizado:', data.customerName);
        }
        if (customerEmailEl) {
          customerEmailEl.textContent = data.customerEmail || '';
          console.log('üìß Email actualizado:', data.customerEmail);
        }
        
        // Actualizar resumen
        const productsCountEl = document.querySelector('[data-products-count]');
        const totalEl = document.querySelector('[data-total]');
        
        if (productsCountEl) {
          productsCountEl.textContent = data.items.length || 0;
          console.log('üìä Productos actualizados:', data.items.length);
        }
        if (totalEl) {
          totalEl.textContent = `$${(data.totalCents / 100).toFixed(2)}`;
          console.log('üí∞ Total actualizado:', `$${(data.totalCents / 100).toFixed(2)}`);
        }
        
        // Actualizar lista de productos
        const productsContainer = document.querySelector('[data-products-list]');
        if (productsContainer && data.items.length > 0) {
          console.log('üõçÔ∏è Renderizando productos:', data.items);
          productsContainer.innerHTML = data.items.map(item => `
            <div class="flex items-center gap-3 sm:gap-4 p-3 sm:p-4 bg-white/5 rounded-lg">
              <div class="w-12 h-12 sm:w-16 sm:h-16 bg-white/10 rounded-lg overflow-hidden flex-shrink-0">
                <img 
                  src="/images/placeholder-product.jpg"
                  alt="${item.title}"
                  class="w-full h-full object-cover"
                />
              </div>
              <div class="flex-1 min-w-0">
                <h4 class="font-medium text-white text-sm sm:text-base line-clamp-2">${item.title}</h4>
                <p class="text-xs sm:text-sm text-white/50">Cantidad: ${item.qty}</p>
              </div>
              <div class="text-right flex-shrink-0">
                <p class="font-medium text-white text-xs sm:text-sm">
                  $${(item.priceCents / 100).toFixed(2)} c/u
                </p>
                <p class="text-xs sm:text-sm text-white/50">
                  Subtotal: $${((item.priceCents * item.qty) / 100).toFixed(2)}
                </p>
              </div>
            </div>
          `).join('');
        } else if (productsContainer) {
          productsContainer.innerHTML = '<div class="text-center py-8"><p class="text-white/50">No hay productos en este pedido</p></div>';
        }
        
        // Limpiar sessionStorage despu√©s de usar
        sessionStorage.removeItem('orderData');
        console.log('‚úÖ Datos del pedido cargados exitosamente');
      } catch (error) {
        console.error('‚ùå Error cargando datos del pedido:', error);
      }
    } else {
      console.log('‚ö†Ô∏è No se encontraron datos del pedido en sessionStorage');
    }
  </script>
</BaseLayout>