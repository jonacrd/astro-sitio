---
// Panel del carrito de compras
---

<div class="cart-panel" id="cart-panel">
  <div class="cart-header">
    <h3>ðŸ›’ Carrito de Compras</h3>
    <button class="close-cart" id="close-cart">Ã—</button>
  </div>
  
  <div class="cart-content" id="cart-content">
    <div class="loading">Cargando carrito...</div>
  </div>
  
  <div class="cart-footer" id="cart-footer" style="display: none;">
    <div class="cart-total">
      <span>Total: </span>
      <span id="cart-total-amount">$0</span>
    </div>
    <button class="checkout-btn" id="checkout-btn">
      Finalizar Compra
    </button>
  </div>
</div>

<div class="cart-overlay" id="cart-overlay"></div>

<style>
  .cart-panel {
    position: fixed;
    top: 0;
    right: -400px;
    width: 400px;
    height: 100vh;
    background: white;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: right 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .cart-panel.open {
    right: 0;
  }

  .cart-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .cart-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .cart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid #eee;
    background: #f8f9fa;
  }

  .cart-header h3 {
    margin: 0;
    color: #333;
    font-size: 18px;
  }

  .close-cart {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close-cart:hover {
    color: #333;
  }

  .cart-content {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
  }

  .cart-item {
    display: flex;
    gap: 12px;
    padding: 12px 0;
    border-bottom: 1px solid #f0f0f0;
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  .cart-item-image {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
  }

  .cart-item-info {
    flex: 1;
  }

  .cart-item-name {
    font-weight: 600;
    margin: 0 0 4px 0;
    font-size: 14px;
    line-height: 1.3;
  }

  .cart-item-price {
    color: #2e7d32;
    font-weight: 600;
    font-size: 14px;
  }

  .cart-item-controls {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 8px;
  }

  .qty-btn {
    background: #f0f0f0;
    border: none;
    width: 28px;
    height: 28px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
  }

  .qty-btn:hover {
    background: #e0e0e0;
  }

  .qty-display {
    min-width: 30px;
    text-align: center;
    font-weight: 600;
  }

  .remove-item {
    background: #ffebee;
    color: #c62828;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
  }

  .remove-item:hover {
    background: #ffcdd2;
  }

  .cart-footer {
    padding: 20px;
    border-top: 1px solid #eee;
    background: #f8f9fa;
  }

  .cart-total {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    font-size: 18px;
    font-weight: 700;
  }

  .checkout-btn {
    width: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 12px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .checkout-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
  }

  .checkout-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .empty-cart {
    text-align: center;
    padding: 40px 20px;
    color: #666;
  }

  .empty-cart-icon {
    font-size: 48px;
    margin-bottom: 16px;
  }

  .loading {
    text-align: center;
    padding: 40px 20px;
    color: #666;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .cart-panel {
      width: 100%;
      right: -100%;
    }
  }
</style>

<script>
  class CartPanel {
    constructor() {
      this.panel = document.getElementById('cart-panel');
      this.overlay = document.getElementById('cart-overlay');
      this.content = document.getElementById('cart-content');
      this.footer = document.getElementById('cart-footer');
      this.closeBtn = document.getElementById('close-cart');
      this.checkoutBtn = document.getElementById('checkout-btn');
      
      this.init();
    }

    init() {
      this.closeBtn?.addEventListener('click', () => this.close());
      this.overlay?.addEventListener('click', () => this.close());
      this.checkoutBtn?.addEventListener('click', () => this.checkout());
      
      // Escuchar eventos de actualizaciÃ³n del carrito
      document.addEventListener('cart:updated', () => this.loadCart());
      
      // Cargar carrito inicial
      this.loadCart();
    }

    open() {
      this.panel?.classList.add('open');
      this.overlay?.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.panel?.classList.remove('open');
      this.overlay?.classList.remove('active');
      document.body.style.overflow = '';
    }

    async loadCart() {
      try {
        const response = await fetch('/api/cart');
        const cart = await response.json();
        
        if (cart.items && cart.items.length > 0) {
          this.renderCart(cart);
          this.footer.style.display = 'block';
        } else {
          this.renderEmptyCart();
          this.footer.style.display = 'none';
        }
      } catch (error) {
        console.error('Error loading cart:', error);
        this.content.innerHTML = '<div class="loading">Error al cargar el carrito</div>';
      }
    }

    renderCart(cart) {
      const total = cart.items.reduce((sum, item) => sum + (item.qty * item.product.priceCents), 0);
      
      this.content.innerHTML = `
        ${cart.items.map(item => `
          <div class="cart-item">
            <img src="${item.product.imageUrl || '/img/placeholder.jpg'}" 
                 alt="${item.product.name}" 
                 class="cart-item-image">
            <div class="cart-item-info">
              <h4 class="cart-item-name">${item.product.name}</h4>
              <div class="cart-item-price">${this.formatPrice(item.product.priceCents)}</div>
              <div class="cart-item-controls">
                <button class="qty-btn" onclick="cartPanel.updateQty(${item.productId}, -1)">-</button>
                <span class="qty-display">${item.qty}</span>
                <button class="qty-btn" onclick="cartPanel.updateQty(${item.productId}, 1)">+</button>
                <button class="remove-item" onclick="cartPanel.removeItem(${item.productId})">Eliminar</button>
              </div>
            </div>
          </div>
        `).join('')}
      `;
      
      document.getElementById('cart-total-amount').textContent = this.formatPrice(total);
    }

    renderEmptyCart() {
      this.content.innerHTML = `
        <div class="empty-cart">
          <div class="empty-cart-icon">ðŸ›’</div>
          <p>Tu carrito estÃ¡ vacÃ­o</p>
          <p>Agrega algunos productos para comenzar</p>
        </div>
      `;
    }

    async updateQty(productId, change) {
      try {
        const endpoint = change > 0 ? '/api/cart/add' : '/api/cart/remove';
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, qty: Math.abs(change) })
        });

        if (!response.ok) {
          const error = await response.json();
          alert(error.error || 'Error al actualizar cantidad');
          return;
        }

        this.loadCart();
      } catch (error) {
        console.error('Error updating quantity:', error);
        alert('Error al actualizar cantidad');
      }
    }

    async removeItem(productId) {
      try {
        const response = await fetch('/api/cart/remove', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, qty: 999 }) // Cantidad alta para eliminar
        });

        if (!response.ok) {
          const error = await response.json();
          alert(error.error || 'Error al eliminar producto');
          return;
        }

        this.loadCart();
      } catch (error) {
        console.error('Error removing item:', error);
        alert('Error al eliminar producto');
      }
    }

    async checkout() {
      if (!this.checkoutBtn) return;
      
      this.checkoutBtn.disabled = true;
      this.checkoutBtn.textContent = 'Procesando...';

      try {
        const response = await fetch('/api/checkout', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await response.json();

        if (!response.ok) {
          alert(result.error || 'Error en el checkout');
          return;
        }

        // Redirigir al ticket
        window.location.href = `/ticket/${result.order.orderCode}`;
        
      } catch (error) {
        console.error('Checkout error:', error);
        alert('Error en el checkout');
      } finally {
        this.checkoutBtn.disabled = false;
        this.checkoutBtn.textContent = 'Finalizar Compra';
      }
    }

    formatPrice(cents) {
      return new Intl.NumberFormat('es-CL', {
        style: 'currency',
        currency: 'CLP',
        minimumFractionDigits: 0
      }).format(cents);
    }
  }

  // Inicializar cuando el DOM estÃ© listo
  document.addEventListener('DOMContentLoaded', () => {
    window.cartPanel = new CartPanel();
  });

  // FunciÃ³n global para abrir el carrito
  window.openCart = () => {
    window.cartPanel?.open();
  };
</script>
