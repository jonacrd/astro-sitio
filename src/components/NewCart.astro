---
// Componente de carrito completamente nuevo y funcional
---

<style>
  /* Estilos del botÃ³n del carrito */
  .cart-button {
    position: fixed;
    top: 20px;
    right: 20px;
    background: linear-gradient(135deg, #ff6b6b, #ee5a24);
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 25px;
    cursor: pointer;
    font-weight: bold;
    font-size: 14px;
    z-index: 1000;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .cart-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);
  }

  .cart-count {
    background: #ff4757;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
  }

  /* Overlay del carrito */
  .cart-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    z-index: 9998;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .cart-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Panel del carrito */
  .cart-panel {
    position: fixed;
    top: 0;
    right: 0;
    width: 400px;
    height: 100vh;
    background: white;
    z-index: 9999;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    box-shadow: -5px 0 25px rgba(0, 0, 0, 0.1);
  }

  .cart-panel.active {
    transform: translateX(0);
  }

  /* Header del carrito */
  .cart-header {
    padding: 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
  }

  .cart-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333;
    margin: 0;
  }

  .close-cart {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    padding: 5px;
    border-radius: 50%;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close-cart:hover {
    background: #eee;
  }

  /* Contenido del carrito */
  .cart-content {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
  }

  .cart-item {
    display: flex;
    gap: 15px;
    padding: 15px 0;
    border-bottom: 1px solid #eee;
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  .item-image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 8px;
  }

  .item-details {
    flex: 1;
  }

  .item-name {
    font-weight: bold;
    color: #333;
    margin-bottom: 5px;
  }

  .item-variant {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 10px;
  }

  .item-price {
    font-weight: bold;
    color: #ff6b6b;
    margin-bottom: 10px;
  }

  .quantity-controls {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .qty-btn {
    background: #f0f0f0;
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
  }

  .qty-btn:hover {
    background: #e0e0e0;
  }

  .qty-display {
    font-weight: bold;
    min-width: 20px;
    text-align: center;
  }

  .remove-item {
    background: #ff4757;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 15px;
    cursor: pointer;
    font-size: 0.8rem;
    margin-top: 10px;
  }

  .remove-item:hover {
    background: #ff3742;
  }

  /* Carrito vacÃ­o */
  .empty-cart {
    text-align: center;
    padding: 40px 20px;
    color: #666;
  }

  .empty-cart-icon {
    font-size: 3rem;
    margin-bottom: 20px;
  }

  /* Footer del carrito */
  .cart-footer {
    padding: 20px;
    border-top: 1px solid #eee;
    background: #f8f9fa;
  }

  .cart-total {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    font-size: 1.2rem;
    font-weight: bold;
  }

  .checkout-btn {
    width: 100%;
    background: linear-gradient(135deg, #ff6b6b, #ee5a24);
    color: white;
    border: none;
    padding: 15px;
    border-radius: 25px;
    font-size: 1.1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .checkout-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
  }

  .checkout-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .cart-panel {
      width: 100vw;
    }
    
    .cart-button {
      top: 15px;
      right: 15px;
      padding: 10px 15px;
      font-size: 13px;
    }
  }
</style>

<!-- BotÃ³n del carrito -->
<button class="cart-button" id="cart-button">
  ðŸ›’ Carrito
  <span class="cart-count" id="cart-count">0</span>
</button>

<!-- Overlay -->
<div class="cart-overlay" id="cart-overlay"></div>

<!-- Panel del carrito -->
<div class="cart-panel" id="cart-panel">
  <div class="cart-header">
    <h3 class="cart-title">Tu Carrito</h3>
    <button class="close-cart" id="close-cart">âœ•</button>
  </div>
  
  <div class="cart-content" id="cart-content">
    <div class="empty-cart">
      <div class="empty-cart-icon">ðŸ›’</div>
      <p>Tu carrito estÃ¡ vacÃ­o</p>
    </div>
  </div>
  
  <div class="cart-footer" id="cart-footer" style="display: none;">
    <div class="cart-total">
      <span>Total:</span>
      <span id="cart-total">$0</span>
    </div>
    <button class="checkout-btn" id="checkout-btn">
      Finalizar Compra
    </button>
  </div>
</div>

<script>
  class NewCart {
    constructor() {
      this.cart = [];
      this.isOpen = false;
      this.init();
    }

    init() {
      this.bindEvents();
      this.loadCart();
    }

    bindEvents() {
      const cartButton = document.getElementById('cart-button');
      const closeButton = document.getElementById('close-cart');
      const overlay = document.getElementById('cart-overlay');
      const checkoutBtn = document.getElementById('checkout-btn');

      cartButton.addEventListener('click', () => this.openCart());
      closeButton.addEventListener('click', () => this.closeCart());
      overlay.addEventListener('click', () => this.closeCart());
      checkoutBtn.addEventListener('click', () => this.checkout());

      // Escuchar eventos de agregar al carrito
      document.addEventListener('add-to-cart', (e) => {
        this.addItem(e.detail);
      });
    }

    async loadCart() {
      try {
        const response = await fetch('/api/cart.json', {
          credentials: 'include'
        });
        
        if (response.ok) {
          const data = await response.json();
          this.cart = data.items || [];
          this.updateDisplay();
        }
      } catch (error) {
        console.error('Error cargando carrito:', error);
      }
    }

    async addItem(item) {
      try {
        // Primero obtener la variante del producto
        const productResponse = await fetch(`/api/products.json?productId=${item.productId}`);
        const productData = await productResponse.json();
        
        if (productData.variants && productData.variants.length > 0) {
          const variant = productData.variants[0]; // Usar la primera variante disponible
          
          const response = await fetch('/api/cart/add.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
              variantId: variant.id,
              quantity: item.quantity || 1,
              size: variant.size,
              colorHex: variant.colorHex
            })
          });

          if (response.ok) {
            const result = await response.json();
            if (result.ok) {
              await this.loadCart();
              this.showNotification('Producto agregado al carrito');
            } else {
              this.showNotification(result.error || 'Error al agregar producto', 'error');
            }
          } else {
            this.showNotification('Error de conexiÃ³n', 'error');
          }
        } else {
          this.showNotification('No hay variantes disponibles para este producto', 'error');
        }
      } catch (error) {
        console.error('Error agregando al carrito:', error);
        this.showNotification('Error al agregar producto', 'error');
      }
    }

    async updateQuantity(itemId, change) {
      try {
        const response = await fetch('/api/cart/update.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({
            itemId: itemId,
            quantity: change
          })
        });

        if (response.ok) {
          await this.loadCart();
        }
      } catch (error) {
        console.error('Error actualizando cantidad:', error);
      }
    }

    async removeItem(itemId) {
      try {
        const response = await fetch('/api/cart/remove.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({ itemId: itemId })
        });

        if (response.ok) {
          await this.loadCart();
        }
      } catch (error) {
        console.error('Error removiendo item:', error);
      }
    }

    updateDisplay() {
      const cartCount = document.getElementById('cart-count');
      const cartContent = document.getElementById('cart-content');
      const cartFooter = document.getElementById('cart-footer');
      const cartTotal = document.getElementById('cart-total');

      // Actualizar contador
      const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
      cartCount.textContent = totalItems;

      // Actualizar contenido
      if (this.cart.length === 0) {
        cartContent.innerHTML = `
          <div class="empty-cart">
            <div class="empty-cart-icon">ðŸ›’</div>
            <p>Tu carrito estÃ¡ vacÃ­o</p>
          </div>
        `;
        cartFooter.style.display = 'none';
      } else {
        cartContent.innerHTML = this.cart.map(item => `
          <div class="cart-item">
            <img src="${item.image || '/img/default-product.jpg'}" alt="${item.name}" class="item-image">
            <div class="item-details">
              <div class="item-name">${item.name}</div>
              <div class="item-variant">Talla: ${item.size} â€¢ Color: ${item.color}</div>
              <div class="item-price">$${item.price.toFixed(2)}</div>
              <div class="quantity-controls">
                <button class="qty-btn" onclick="newCart.updateQuantity(${item.id}, -1)">-</button>
                <span class="qty-display">${item.quantity}</span>
                <button class="qty-btn" onclick="newCart.updateQuantity(${item.id}, 1)">+</button>
              </div>
              <button class="remove-item" onclick="newCart.removeItem(${item.id})">Quitar</button>
            </div>
          </div>
        `).join('');

        // Calcular total
        const total = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        cartTotal.textContent = `$${total.toFixed(2)}`;
        cartFooter.style.display = 'block';
      }
    }

    openCart() {
      this.isOpen = true;
      document.getElementById('cart-overlay').classList.add('active');
      document.getElementById('cart-panel').classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    closeCart() {
      this.isOpen = false;
      document.getElementById('cart-overlay').classList.remove('active');
      document.getElementById('cart-panel').classList.remove('active');
      document.body.style.overflow = '';
    }

    async checkout() {
      const checkoutBtn = document.getElementById('checkout-btn');
      checkoutBtn.disabled = true;
      checkoutBtn.textContent = 'Procesando...';

      try {
        const response = await fetch('/api/cart/checkout.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });

        if (response.ok) {
          const result = await response.json();
          if (result.ok) {
            this.showNotification('Â¡Compra realizada con Ã©xito!', 'success');
            await this.loadCart();
            this.closeCart();
            // Redirigir a la pÃ¡gina de orden
            window.location.href = `/orden/${result.orderId}`;
          } else {
            this.showNotification(result.error || 'Error al procesar la compra', 'error');
          }
        }
      } catch (error) {
        console.error('Error en checkout:', error);
        this.showNotification('Error al procesar la compra', 'error');
      } finally {
        checkoutBtn.disabled = false;
        checkoutBtn.textContent = 'Finalizar Compra';
      }
    }

    showNotification(message, type = 'success') {
      // Crear notificaciÃ³n temporal
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#4CAF50' : '#f44336'};
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        z-index: 10000;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
      `;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Inicializar el carrito cuando el DOM estÃ© listo
  document.addEventListener('DOMContentLoaded', () => {
    window.newCart = new NewCart();
  });
</script>
