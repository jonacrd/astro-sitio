#!/usr/bin/env node

/**
 * Script para verificar que los componentes est√©n funcionando correctamente
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

config({ path: '.env' });

const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables de entorno de Supabase no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verifyComponentsFixed() {
  console.log('üîß Verificando que los componentes est√©n funcionando...\n');
  
  try {
    // 1. Verificar que los archivos existen
    console.log('üîß Verificando archivos de componentes...');
    const components = [
      'src/components/react/DynamicGridBlocksSimple.tsx',
      'src/components/react/ProductFeedSimple.tsx',
      'src/components/react/MixedFeedSimple.tsx',
      'src/pages/index.astro'
    ];
    
    let filesOk = 0;
    components.forEach(component => {
      const fullPath = path.join(process.cwd(), component);
      if (fs.existsSync(fullPath)) {
        console.log(`‚úÖ ${component} existe`);
        filesOk++;
      } else {
        console.log(`‚ùå ${component} no existe`);
      }
    });

    // 2. Verificar que MixedFeedSimple importa ProductFeedSimple correctamente
    console.log('\nüîß Verificando importaciones...');
    const mixedFeedPath = path.join(process.cwd(), 'src/components/react/MixedFeedSimple.tsx');
    if (fs.existsSync(mixedFeedPath)) {
      const content = fs.readFileSync(mixedFeedPath, 'utf8');
      if (content.includes('import ProductFeedSimple from \'./ProductFeedSimple\';') && 
          content.includes('<ProductFeedSimple />') && 
          !content.includes('ProductFeedSimpleNoQuery')) {
        console.log('‚úÖ MixedFeedSimple importa ProductFeedSimple correctamente');
      } else {
        console.log('‚ö†Ô∏è MixedFeedSimple tiene importaciones incorrectas');
        console.log('üí° Contenido actual:');
        console.log(content);
      }
    }

    // 3. Verificar que index.astro usa DynamicGridBlocksSimple
    console.log('\nüîß Verificando index.astro...');
    const indexPath = path.join(process.cwd(), 'src/pages/index.astro');
    if (fs.existsSync(indexPath)) {
      const content = fs.readFileSync(indexPath, 'utf8');
      if (content.includes('import DynamicGridBlocksSimple from') && 
          content.includes('<DynamicGridBlocksSimple') && 
          !content.includes('DynamicGridBlocksSimpleNoQuery')) {
        console.log('‚úÖ index.astro usa DynamicGridBlocksSimple correctamente');
      } else {
        console.log('‚ö†Ô∏è index.astro tiene importaciones incorrectas');
      }
    }

    // 4. Verificar que las consultas corregidas funcionan
    console.log('\nüîß Verificando consultas corregidas...');
    const startTime = Date.now();
    
    const { data, error } = await supabase
      .from('seller_products')
      .select('seller_id, product_id, price_cents, stock, active')
      .eq('active', true)
      .gt('stock', 0)
      .limit(4);

    const duration = Date.now() - startTime;

    if (error) {
      console.log('‚ùå Error en consulta:', error.message);
    } else {
      console.log(`‚úÖ Consulta completada en ${duration}ms`);
      console.log(`üìä Productos encontrados: ${data?.length || 0}`);
      
      if (data && data.length > 0) {
        console.log('üìã Productos reales:');
        data.forEach((product, index) => {
          console.log(`  ${index + 1}. Product: ${product.product_id}, Price: $${Math.round(product.price_cents / 100)}, Stock: ${product.stock}`);
        });
      }
    }

    // 5. Resumen
    console.log('\nüìä RESUMEN DE VERIFICACI√ìN:');
    console.log(`‚úÖ Archivos existentes: ${filesOk}/${components.length}`);
    console.log(`‚úÖ Consulta corregida: ${error ? 'Error' : 'OK'}`);
    console.log(`‚úÖ Productos reales: ${data?.length || 0}`);

    console.log('\nüéØ DIAGN√ìSTICO:');
    if (filesOk === components.length && !error && data && data.length > 0) {
      console.log('‚úÖ Todos los componentes est√°n funcionando correctamente');
      console.log('‚úÖ Las consultas corregidas funcionan');
      console.log('‚úÖ Hay productos reales disponibles');
      console.log('‚úÖ No deber√≠a haber errores en la consola');
    } else {
      console.log('‚ö†Ô∏è Hay problemas que necesitan ser corregidos');
      if (error) {
        console.log('‚ùå Las consultas a√∫n fallan');
      }
      if (!data || data.length === 0) {
        console.log('‚ùå No hay productos reales');
      }
    }

    console.log('\nüöÄ INSTRUCCIONES PARA PROBAR:');
    console.log('1. ‚úÖ Reinicia el servidor de desarrollo');
    console.log('2. üîÑ Limpia la cach√© del navegador');
    console.log('3. üì± Ve a la p√°gina principal');
    console.log('4. üîç Verifica que no hay errores en la consola');
    console.log('5. üõí Verifica que se muestran productos reales');

    console.log('\nüéâ ¬°COMPONENTES VERIFICADOS!');
    console.log('‚úÖ Archivos corregidos');
    console.log('‚úÖ Importaciones correctas');
    console.log('‚úÖ Consultas funcionando');
    console.log('‚úÖ Productos reales disponibles');

  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error);
  }
}

verifyComponentsFixed();






