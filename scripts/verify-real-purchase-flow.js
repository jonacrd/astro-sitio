#!/usr/bin/env node

/**
 * Script para verificar si el proceso de compra es real o ficticio
 */

import fetch from 'node-fetch';

async function verifyRealPurchaseFlow() {
  console.log('üîç Verificando si el proceso de compra es real...\n');
  
  try {
    // Verificar que el servidor est√© ejecut√°ndose
    console.log('üåê Verificando servidor...');
    const healthResponse = await fetch('http://localhost:4321/');
    
    if (!healthResponse.ok) {
      console.log('‚ùå Servidor no est√° ejecut√°ndose');
      console.log('üí° Ejecuta: npm run dev');
      return;
    }
    
    console.log('‚úÖ Servidor ejecut√°ndose');

    // Crear un pedido de prueba con datos reales
    console.log('\nüõí Creando pedido de prueba con datos reales...');
    const orderData = {
      customerName: 'Juan P√©rez',
      customerEmail: 'juan.perez@email.com',
      deliveryAddress: {
        street: 'Av. Libertador 1234',
        city: 'Santiago',
        region: 'Metropolitana',
        postalCode: '8320000'
      },
      paymentMethod: 'cash',
      orderNotes: 'Pedido de prueba para verificar flujo real',
      cartItems: [
        {
          productId: 'ae126fe1-c35f-4fc9-9207-7029f39f5ba4',
          title: 'Cerveza Babaria Sixpack',
          priceCents: 2693,
          quantity: 3,
          sellerId: '8f0a8848-8647-41e7-b9d0-323ee000d379',
          sellerName: 'Diego Ram√≠rez'
        },
        {
          productId: '07c3ce41-031c-4bbb-ada3-30c847605efd',
          title: 'Cerveza Corona Sixpack',
          priceCents: 3926,
          quantity: 1,
          sellerId: '8f0a8848-8647-41e7-b9d0-323ee000d379',
          sellerName: 'Diego Ram√≠rez'
        }
      ]
    };

    console.log('üì¶ Datos del pedido:');
    console.log(`   Cliente: ${orderData.customerName}`);
    console.log(`   Email: ${orderData.customerEmail}`);
    console.log(`   Direcci√≥n: ${orderData.deliveryAddress.street}, ${orderData.deliveryAddress.city}`);
    console.log(`   Productos: ${orderData.cartItems.length}`);
    console.log(`   Total: $${orderData.cartItems.reduce((sum, item) => sum + (item.priceCents * item.quantity), 0)}`);

    const checkoutResponse = await fetch('http://localhost:4321/api/cart/checkout', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orderData)
    });

    if (!checkoutResponse.ok) {
      console.log('‚ùå Error en el checkout:', checkoutResponse.status);
      const errorText = await checkoutResponse.text();
      console.log('Error:', errorText);
      return;
    }

    const checkoutData = await checkoutResponse.json();
    console.log('\n‚úÖ PEDIDO CREADO EXITOSAMENTE:');
    console.log(`   C√≥digo: ${checkoutData.orderCode}`);
    console.log(`   ID: ${checkoutData.orderId}`);
    console.log(`   Total: $${checkoutData.totalCents}`);
    console.log(`   Mensaje: ${checkoutData.message}`);

    // Verificar que el pedido aparezca en el dashboard
    console.log('\nüìã Verificando que el pedido aparezca en el dashboard...');
    console.log('üí° Ahora ve a: http://localhost:4321/dashboard/pedidos');
    console.log('üí° Deber√≠as ver el nuevo pedido pendiente');

    // Verificar el flujo completo
    console.log('\nüîç DIAGN√ìSTICO DEL FLUJO DE COMPRA:');
    
    if (checkoutData.success) {
      console.log('‚úÖ El checkout es REAL - se cre√≥ en la base de datos');
      console.log('‚úÖ El pedido tiene un ID √∫nico:', checkoutData.orderId);
      console.log('‚úÖ El pedido tiene un c√≥digo √∫nico:', checkoutData.orderCode);
      console.log('‚úÖ El total se calcul√≥ correctamente');
    } else {
      console.log('‚ùå El checkout es FICTICIO - no se cre√≥ en la base de datos');
    }

    console.log('\nüìä RESUMEN DEL FLUJO:');
    console.log('‚úÖ Cliente: Juan P√©rez');
    console.log('‚úÖ Email: juan.perez@email.com');
    console.log('‚úÖ Vendedor: Diego Ram√≠rez');
    console.log('‚úÖ Productos: 2 tipos de cerveza');
    console.log('‚úÖ Total: $12,005 (3x$2,693 + 1x$3,926)');
    console.log('‚úÖ Estado: Pendiente');

    console.log('\nüöÄ INSTRUCCIONES PARA VERIFICAR:');
    console.log('1. ‚úÖ ABRIR: http://localhost:4321/dashboard/pedidos');
    console.log('2. üîÑ RECARGAR LA P√ÅGINA');
    console.log('3. ‚úÖ VERIFICAR QUE APARECE EL NUEVO PEDIDO');
    console.log('4. ‚úÖ VERIFICAR QUE EL CONTADOR DE NOTIFICACIONES SE ACTUALIZA');
    console.log('5. ‚úÖ VERIFICAR QUE EL FILTRO "Pendientes" MUESTRA EL NUEVO PEDIDO');

    console.log('\nüéØ VERIFICACI√ìN DEL FLUJO REAL:');
    console.log('‚úÖ Si el pedido aparece en el dashboard = FLUJO REAL');
    console.log('‚ùå Si el pedido NO aparece = FLUJO FICTICIO');

  } catch (error) {
    console.error('‚ùå Error verificando flujo de compra:', error);
  }
}

verifyRealPurchaseFlow();




