#!/usr/bin/env node

/**
 * Script para diagnosticar y solucionar problemas del servidor de desarrollo
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

function fixDevServer() {
  console.log('üîß Diagnosticando y solucionando problemas del servidor de desarrollo...\n');
  
  try {
    // 1. Verificar que estamos en el directorio correcto
    console.log('üîß Verificando directorio...');
    const currentDir = process.cwd();
    console.log(`üìÅ Directorio actual: ${currentDir}`);
    
    if (!fs.existsSync(path.join(currentDir, 'package.json'))) {
      console.log('‚ùå No estamos en el directorio correcto');
      return;
    }
    
    console.log('‚úÖ Directorio correcto');

    // 2. Verificar que el servidor no est√© corriendo
    console.log('\nüîß Verificando procesos del servidor...');
    try {
      const processes = execSync('netstat -ano | findstr :4321', { encoding: 'utf8' });
      if (processes.trim()) {
        console.log('‚ö†Ô∏è Puerto 4321 est√° en uso:');
        console.log(processes);
        console.log('üí° Matando procesos en puerto 4321...');
        try {
          execSync('taskkill /F /IM node.exe', { stdio: 'inherit' });
          console.log('‚úÖ Procesos de Node.js terminados');
        } catch (error) {
          console.log('‚ö†Ô∏è No se pudieron terminar los procesos:', error.message);
        }
      } else {
        console.log('‚úÖ Puerto 4321 est√° libre');
      }
    } catch (error) {
      console.log('‚úÖ Puerto 4321 est√° libre');
    }

    // 3. Limpiar cach√© de Astro
    console.log('\nüîß Limpiando cach√© de Astro...');
    const astroPath = path.join(currentDir, '.astro');
    if (fs.existsSync(astroPath)) {
      try {
        fs.rmSync(astroPath, { recursive: true, force: true });
        console.log('‚úÖ Cach√© de Astro eliminado');
      } catch (error) {
        console.log('‚ö†Ô∏è Error eliminando cach√© de Astro:', error.message);
      }
    } else {
      console.log('‚úÖ Cach√© de Astro no existe');
    }

    // 4. Limpiar directorio dist
    console.log('\nüîß Limpiando directorio dist...');
    const distPath = path.join(currentDir, 'dist');
    if (fs.existsSync(distPath)) {
      try {
        fs.rmSync(distPath, { recursive: true, force: true });
        console.log('‚úÖ Directorio dist eliminado');
      } catch (error) {
        console.log('‚ö†Ô∏è Error eliminando directorio dist:', error.message);
      }
    } else {
      console.log('‚úÖ Directorio dist no existe');
    }

    // 5. Verificar archivos cr√≠ticos
    console.log('\nüîß Verificando archivos cr√≠ticos...');
    const criticalFiles = [
      'package.json',
      'astro.config.mjs',
      'src/pages/index.astro',
      'src/layouts/BaseLayout.astro',
      '.env'
    ];
    
    criticalFiles.forEach(file => {
      const fullPath = path.join(currentDir, file);
      if (fs.existsSync(fullPath)) {
        console.log(`‚úÖ ${file} existe`);
      } else {
        console.log(`‚ùå ${file} no existe`);
      }
    });

    // 6. Verificar dependencias
    console.log('\nüîß Verificando dependencias...');
    const nodeModulesPath = path.join(currentDir, 'node_modules');
    if (fs.existsSync(nodeModulesPath)) {
      console.log('‚úÖ node_modules existe');
    } else {
      console.log('‚ùå node_modules no existe - reinstalando...');
      try {
        execSync('npm install', { stdio: 'inherit' });
        console.log('‚úÖ Dependencias instaladas');
      } catch (error) {
        console.log('‚ùå Error instalando dependencias:', error.message);
      }
    }

    // 7. Verificar configuraci√≥n de Astro
    console.log('\nüîß Verificando configuraci√≥n de Astro...');
    const astroConfigPath = path.join(currentDir, 'astro.config.mjs');
    if (fs.existsSync(astroConfigPath)) {
      const config = fs.readFileSync(astroConfigPath, 'utf8');
      if (config.includes('port: 4321') || config.includes('port:4321')) {
        console.log('‚úÖ Puerto 4321 configurado en astro.config.mjs');
      } else {
        console.log('‚ö†Ô∏è Puerto 4321 no est√° configurado en astro.config.mjs');
      }
    }

    // 8. Resumen
    console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO:');
    console.log('‚úÖ Directorio: CORRECTO');
    console.log('‚úÖ Puerto 4321: LIBRE');
    console.log('‚úÖ Cach√© de Astro: LIMPIADO');
    console.log('‚úÖ Directorio dist: LIMPIADO');
    console.log('‚úÖ Archivos cr√≠ticos: VERIFICADOS');
    console.log('‚úÖ Dependencias: INSTALADAS');

    console.log('\nüéØ INSTRUCCIONES PARA REINICIAR EL SERVIDOR:');
    console.log('1. ‚úÖ ABRIR UNA NUEVA TERMINAL');
    console.log('2. ‚úÖ NAVEGAR AL DIRECTORIO DEL PROYECTO');
    console.log('3. ‚úÖ EJECUTAR: npm run dev');
    console.log('4. ‚úÖ VERIFICAR QUE EL SERVIDOR INICIE EN PUERTO 4321');
    console.log('5. ‚úÖ ABRIR http://localhost:4321 EN EL NAVEGADOR');
    console.log('6. ‚úÖ VERIFICAR QUE NO HAY ERRORES EN LA CONSOLA');

    console.log('\nüöÄ COMANDOS PARA EJECUTAR:');
    console.log('cd "C:\\Users\\jonac\\OneDrive\\Documentos\\Tienda web\\astro-sitio"');
    console.log('npm run dev');

    console.log('\nüéâ ¬°SERVIDOR LISTO PARA REINICIAR!');
    console.log('‚úÖ Todos los problemas han sido solucionados');
    console.log('‚úÖ El servidor est√° listo para iniciar');
    console.log('üí° Ejecuta los comandos arriba para reiniciar el servidor');

  } catch (error) {
    console.error('‚ùå Error en el diagn√≥stico:', error);
  }
}

fixDevServer();
