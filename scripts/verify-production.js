#!/usr/bin/env node

/**
 * Script para verificar el estado de producci√≥n
 * Ejecutar con: node scripts/verify-production.js
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Cargar variables de entorno
config();

const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno requeridas:');
  console.error(`PUBLIC_SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`);
  console.error(`SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ' : '‚ùå'}`);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifyProduction() {
  console.log('üöÄ Verificando estado de producci√≥n...');

  try {
    // 1. Verificar conexi√≥n a Supabase
    console.log('\nüîó VERIFICANDO CONEXI√ìN A SUPABASE:');
    try {
      const { data, error } = await supabase.from('profiles').select('count').limit(1);
      if (error) {
        console.error('‚ùå Error conectando a Supabase:', error.message);
        return;
      }
      console.log('‚úÖ Conexi√≥n a Supabase exitosa');
    } catch (error) {
      console.error('‚ùå Error de conexi√≥n:', error.message);
      return;
    }

    // 2. Verificar productos
    console.log('\nüì¶ VERIFICANDO PRODUCTOS:');
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('id, title, category')
      .limit(5);

    if (productsError) {
      console.error('‚ùå Error obteniendo productos:', productsError);
    } else {
      console.log(`‚úÖ Productos en BD: ${products.length}`);
    }

    // 3. Verificar productos de vendedores
    console.log('\nüè™ VERIFICANDO PRODUCTOS DE VENDEDORES:');
    const { data: sellerProducts, error: sellerProductsError } = await supabase
      .from('seller_products')
      .select(`
        seller_id,
        product_id,
        price_cents,
        stock,
        active,
        product:products!inner(
          title,
          category
        )
      `)
      .eq('active', true)
      .gt('stock', 0)
      .limit(5);

    if (sellerProductsError) {
      console.error('‚ùå Error obteniendo productos de vendedores:', sellerProductsError);
    } else {
      console.log(`‚úÖ Productos de vendedores: ${sellerProducts.length}`);
    }

    // 4. Verificar endpoint local
    console.log('\nüåê VERIFICANDO ENDPOINT LOCAL:');
    try {
      const response = await fetch('http://localhost:4321/api/feed/real?limit=4&offers=true');
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Endpoint local funcionando');
        console.log(`   Productos encontrados: ${data.data?.products?.length || 0}`);
      } else {
        console.error(`‚ùå Error en endpoint local: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå Error probando endpoint local:', error.message);
    }

    // 5. Crear script de verificaci√≥n para producci√≥n
    console.log('\nüìù CREANDO SCRIPT DE VERIFICACI√ìN PARA PRODUCCI√ìN:');
    
    const productionScript = `
// Script de verificaci√≥n para producci√≥n
// Ejecutar en la consola del navegador en producci√≥n

console.log('üîç Verificando producci√≥n...');

// 1. Verificar endpoint de debug
fetch('/api/debug/production')
  .then(response => response.json())
  .then(data => {
    console.log('üîß Variables de entorno:', data.envVars);
    console.log('üåç Entorno:', data.environment);
  })
  .catch(error => {
    console.error('‚ùå Error en debug endpoint:', error);
  });

// 2. Verificar endpoint /api/feed/real
const endpoints = [
  '/api/feed/real?limit=4&offers=true',
  '/api/feed/real?limit=6&featured=true',
  '/api/feed/real?limit=8&new=true',
  '/api/feed/real?limit=6&category=comida',
  '/api/feed/real?limit=4&category=bebidas'
];

endpoints.forEach(async (endpoint) => {
  try {
    const response = await fetch(endpoint);
    if (response.ok) {
      const data = await response.json();
      console.log(\`‚úÖ \${endpoint}: \${data.data?.products?.length || 0} productos\`);
    } else {
      console.error(\`‚ùå \${endpoint}: \${response.status} \${response.statusText}\`);
    }
  } catch (error) {
    console.error(\`‚ùå \${endpoint}: \${error.message}\`);
  }
});
`;

    console.log('‚úÖ Script de verificaci√≥n creado');
    console.log('üìã Para usar en producci√≥n:');
    console.log('1. Abrir consola del navegador en producci√≥n');
    console.log('2. Pegar el script de verificaci√≥n');
    console.log('3. Ejecutar para verificar endpoints');

    // 6. Resumen de soluciones
    console.log('\nüéØ SOLUCIONES PARA PRODUCCI√ìN:');
    console.log('1. ‚úÖ Verificar variables de entorno en Vercel');
    console.log('2. ‚úÖ Verificar que las tablas existan en Supabase');
    console.log('3. ‚úÖ Verificar que haya productos en la BD');
    console.log('4. ‚úÖ Verificar que haya productos de vendedores activos');
    console.log('5. ‚úÖ Verificar que el endpoint /api/feed/real est√© funcionando');
    console.log('6. ‚úÖ Verificar autenticaci√≥n en producci√≥n');
    console.log('7. ‚úÖ Verificar que no haya errores de CORS');
    console.log('8. ‚úÖ Verificar que no haya errores de permisos');

    console.log('\nüîó PASOS PARA SOLUCIONAR EN PRODUCCI√ìN:');
    console.log('1. Ir a Vercel Dashboard');
    console.log('2. Verificar variables de entorno');
    console.log('3. Hacer redeploy si es necesario');
    console.log('4. Verificar logs de Vercel');
    console.log('5. Verificar logs de Supabase');

    console.log('\nüí° CAUSAS PROBABLES DE LOS ERRORES:');
    console.log('1. Variables de entorno no configuradas en Vercel');
    console.log('2. Endpoint /api/feed/real no desplegado correctamente');
    console.log('3. Problemas de autenticaci√≥n en producci√≥n');
    console.log('4. Problemas de permisos en Supabase');
    console.log('5. Problemas de CORS en producci√≥n');

  } catch (error) {
    console.error('‚ùå Error en el script:', error);
  }
}

verifyProduction();




