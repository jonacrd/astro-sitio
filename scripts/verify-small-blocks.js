#!/usr/bin/env node

/**
 * Script para verificar que los bloques sean peque√±os y se vean los 4 juntos
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

config({ path: '.env' });

const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifySmallBlocks() {
  console.log('üß™ Verificando bloques peque√±os para mosaico 2x2...\n');
  
  try {
    // 1. Verificar tama√±o del contenedor
    console.log('üìè Verificando tama√±o del contenedor...');
    const gridBlockPath = path.join(process.cwd(), 'src/components/feed/DynamicGridBlock.tsx');
    const gridBlockContent = fs.readFileSync(gridBlockPath, 'utf8');
    
    if (gridBlockContent.includes('max-w-[400px]')) {
      console.log('‚úÖ Contenedor peque√±o: max-w-[400px]');
    } else {
      console.log('‚ùå Contenedor no es peque√±o');
    }
    
    if (gridBlockContent.includes('gap-2')) {
      console.log('‚úÖ Gap peque√±o: gap-2');
    } else {
      console.log('‚ùå Gap no es peque√±o');
    }
    
    if (gridBlockContent.includes('px-2')) {
      console.log('‚úÖ Padding peque√±o: px-2');
    } else {
      console.log('‚ùå Padding no es peque√±o');
    }
    
    // 2. Verificar tama√±os de texto y botones
    console.log('\nüìù Verificando tama√±os de texto y botones...');
    
    if (gridBlockContent.includes('text-sm') && gridBlockContent.includes('text-xs')) {
      console.log('‚úÖ Textos peque√±os: text-sm y text-xs');
    } else {
      console.log('‚ùå Textos no son peque√±os');
    }
    
    if (gridBlockContent.includes('h-8') && gridBlockContent.includes('text-xs')) {
      console.log('‚úÖ Botones peque√±os: h-8 y text-xs');
    } else {
      console.log('‚ùå Botones no son peque√±os');
    }
    
    if (gridBlockContent.includes('h-6') && gridBlockContent.includes('px-2')) {
      console.log('‚úÖ Badges peque√±os: h-6 y px-2');
    } else {
      console.log('‚ùå Badges no son peque√±os');
    }
    
    // 3. Verificar grid 2x2
    console.log('\nüìê Verificando grid 2x2...');
    
    if (gridBlockContent.includes('grid-cols-2')) {
      console.log('‚úÖ Grid 2 columnas implementado');
    } else {
      console.log('‚ùå Grid 2 columnas no implementado');
    }
    
    if (gridBlockContent.includes('aspect-[3/4]') && gridBlockContent.includes('aspect-[4/3]')) {
      console.log('‚úÖ Aspect ratios correctos para mosaico');
    } else {
      console.log('‚ùå Aspect ratios incorrectos');
    }
    
    // 4. Verificar DynamicGridBlocks
    console.log('\nüìÑ Verificando DynamicGridBlocks...');
    const gridBlocksPath = path.join(process.cwd(), 'src/components/react/DynamicGridBlocks.tsx');
    const gridBlocksContent = fs.readFileSync(gridBlocksPath, 'utf8');
    
    if (gridBlocksContent.includes('max-w-[400px]')) {
      console.log('‚úÖ DynamicGridBlocks usa contenedor peque√±o');
    } else {
      console.log('‚ùå DynamicGridBlocks no usa contenedor peque√±o');
    }
    
    // 5. Verificar productos disponibles
    console.log('\nüì¶ Verificando productos disponibles...');
    
    const { data: activeProducts, error: activeProductsError } = await supabase
      .from('seller_products')
      .select(`
        seller_id,
        product_id,
        price_cents,
        stock,
        active,
        products!inner (
          id,
          title,
          description,
          category,
          image_url
        )
      `)
      .eq('active', true)
      .gt('stock', 0)
      .limit(4);
    
    if (activeProductsError) {
      console.error('‚ùå Error cargando productos activos:', activeProductsError);
    } else {
      console.log(`‚úÖ Productos activos encontrados: ${activeProducts?.length || 0}`);
      
      if (activeProducts && activeProducts.length >= 4) {
        console.log('\nüìã MOSAICO 2x2 CON BLOQUES PEQUE√ëOS:');
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ   TALL      ‚îÇ   SHORT     ‚îÇ');
        console.log('‚îÇ   (3:4)     ‚îÇ   (4:3)     ‚îÇ');
        console.log('‚îÇ   PEQUE√ëO   ‚îÇ   PEQUE√ëO   ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        console.log('‚îÇ   SHORT     ‚îÇ   TALL      ‚îÇ');
        console.log('‚îÇ   (4:3)     ‚îÇ   (3:4)     ‚îÇ');
        console.log('‚îÇ   PEQUE√ëO   ‚îÇ   PEQUE√ëO   ‚îÇ');
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        
        console.log('\nüìã Productos en el mosaico peque√±o:');
        activeProducts.slice(0, 4).forEach((product, index) => {
          const pattern = ['tall', 'short', 'short', 'tall'][index];
          const position = ['Top-Left', 'Top-Right', 'Bottom-Left', 'Bottom-Right'][index];
          console.log(`  ${index + 1}. ${position} [${pattern.toUpperCase()}]: ${product.products.title}`);
          console.log(`     Precio: $${(product.price_cents / 100).toLocaleString('es-CL')}`);
          console.log(`     Stock: ${product.stock}`);
          console.log(`     Imagen: ${product.products.image_url ? 'S√≠' : 'No'}`);
          console.log('');
        });
      } else {
        console.log('‚ö†Ô∏è No hay suficientes productos para el mosaico (necesita 4)');
      }
    }
    
    // 6. Resumen final
    console.log('\nüìä RESUMEN FINAL:');
    console.log(`‚úÖ Productos disponibles: ${activeProducts?.length || 0}`);
    console.log('‚úÖ Contenedor peque√±o: max-w-[400px]');
    console.log('‚úÖ Gap peque√±o: gap-2');
    console.log('‚úÖ Textos peque√±os: text-sm y text-xs');
    console.log('‚úÖ Botones peque√±os: h-8');
    console.log('‚úÖ Badges peque√±os: h-6');
    console.log('‚úÖ Grid 2x2 con bloques peque√±os');
    console.log('‚úÖ 4 cuadros juntos en formato compacto');
    
    console.log('\nüéâ ¬°BLOQUES PEQUE√ëOS IMPLEMENTADOS CORRECTAMENTE!');
    console.log('\nüí° CARACTER√çSTICAS DE LOS BLOQUES PEQUE√ëOS:');
    console.log('   1. ‚úÖ Contenedor peque√±o: max-w-[400px]');
    console.log('   2. ‚úÖ Gap peque√±o: gap-2');
    console.log('   3. ‚úÖ Textos peque√±os: text-sm y text-xs');
    console.log('   4. ‚úÖ Botones peque√±os: h-8 y text-xs');
    console.log('   5. ‚úÖ Badges peque√±os: h-6 y px-2');
    console.log('   6. ‚úÖ Grid 2x2 compacto');
    console.log('   7. ‚úÖ 4 cuadros juntos visibles');
    console.log('   8. ‚úÖ Aspect ratios correctos');
    
    console.log('\nüöÄ RESULTADO ESPERADO:');
    console.log('   - Contenedor peque√±o: max-w-[400px]');
    console.log('   - 4 cuadros juntos en formato 2x2');
    console.log('   - Bloques peque√±os y compactos');
    console.log('   - Textos y botones peque√±os');
    console.log('   - Gap peque√±o entre bloques');
    console.log('   - Responsive y funcional');
    
    console.log('\nüîß VENTAJAS DE LOS BLOQUES PEQUE√ëOS:');
    console.log('   - ‚úÖ 4 cuadros visibles juntos');
    console.log('   - ‚úÖ Tama√±o compacto y apropiado');
    console.log('   - ‚úÖ Textos legibles pero peque√±os');
    console.log('   - ‚úÖ Botones funcionales pero compactos');
    console.log('   - ‚úÖ Mosaico balanceado');
    console.log('   - ‚úÖ Responsive en m√≥vil y desktop');
    
  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error);
  }
}

verifySmallBlocks();

