#!/usr/bin/env node

/**
 * Script para diagnosticar errores HTTP 500 en producci√≥n
 * Ejecutar con: node scripts/diagnose-production-500.js
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Cargar variables de entorno
config();

const supabaseUrl = process.env.PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno requeridas:');
  console.error(`PUBLIC_SUPABASE_URL: ${supabaseUrl ? '‚úÖ' : '‚ùå'}`);
  console.error(`SUPABASE_SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ' : '‚ùå'}`);
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function diagnoseProduction500() {
  console.log('üîç Diagnosticando errores HTTP 500 en producci√≥n...');

  try {
    // 1. Verificar conexi√≥n a Supabase
    console.log('\nüîó VERIFICANDO CONEXI√ìN A SUPABASE:');
    try {
      const { data, error } = await supabase.from('profiles').select('count').limit(1);
      if (error) {
        console.error('‚ùå Error conectando a Supabase:', error.message);
        return;
      }
      console.log('‚úÖ Conexi√≥n a Supabase exitosa');
    } catch (error) {
      console.error('‚ùå Error de conexi√≥n:', error.message);
      return;
    }

    // 2. Verificar tablas necesarias
    console.log('\nüìä VERIFICANDO TABLAS NECESARIAS:');
    
    const tables = ['profiles', 'products', 'seller_products', 'seller_status'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('*').limit(1);
        if (error) {
          console.error(`‚ùå Error en tabla ${table}:`, error.message);
        } else {
          console.log(`‚úÖ Tabla ${table}: OK`);
        }
      } catch (error) {
        console.error(`‚ùå Error verificando tabla ${table}:`, error.message);
      }
    }

    // 3. Simular consulta del endpoint /api/feed/real
    console.log('\nüîç SIMULANDO CONSULTA DEL ENDPOINT:');
    
    try {
      // Simular consulta de ofertas
      const { data: offers, error: offersError } = await supabase
        .from('seller_products')
        .select(`
          seller_id,
          product_id,
          price_cents,
          stock,
          active,
          updated_at,
          product:products!inner(
            id,
            title,
            description,
            category,
            image_url
          ),
          seller:profiles!inner(
            id,
            name,
            phone
          )
        `)
        .eq('active', true)
        .gt('stock', 0)
        .lt('price_cents', 5000) // Ofertas: precio menor a 5000 centavos
        .order('updated_at', { ascending: false })
        .limit(4);

      if (offersError) {
        console.error('‚ùå Error en consulta de ofertas:', offersError);
      } else {
        console.log(`‚úÖ Consulta de ofertas: ${offers.length} productos`);
      }
    } catch (error) {
      console.error('‚ùå Error simulando consulta:', error.message);
    }

    // 4. Verificar productos de vendedores
    console.log('\nüè™ VERIFICANDO PRODUCTOS DE VENDEDORES:');
    
    const { data: sellerProducts, error: sellerProductsError } = await supabase
      .from('seller_products')
      .select(`
        seller_id,
        product_id,
        price_cents,
        stock,
        active,
        product:products!inner(
          title,
          category
        )
      `)
      .eq('active', true)
      .gt('stock', 0)
      .limit(10);

    if (sellerProductsError) {
      console.error('‚ùå Error obteniendo productos de vendedores:', sellerProductsError);
    } else {
      console.log(`‚úÖ Productos de vendedores: ${sellerProducts.length}`);
      
      // Agrupar por categor√≠a
      const productsByCategory = {};
      sellerProducts.forEach(sp => {
        if (!productsByCategory[sp.product.category]) {
          productsByCategory[sp.product.category] = [];
        }
        productsByCategory[sp.product.category].push(sp);
      });

      console.log('üìä Productos por categor√≠a:');
      Object.keys(productsByCategory).forEach(category => {
        console.log(`   ${category}: ${productsByCategory[category].length} productos`);
      });
    }

    // 5. Verificar estados de vendedores
    console.log('\nüü¢ VERIFICANDO ESTADOS DE VENDEDORES:');
    
    const { data: sellerStatus, error: sellerStatusError } = await supabase
      .from('seller_status')
      .select('seller_id, online')
      .limit(10);

    if (sellerStatusError) {
      console.error('‚ùå Error obteniendo estados de vendedores:', sellerStatusError);
    } else {
      console.log(`‚úÖ Estados de vendedores: ${sellerStatus.length}`);
    }

    // 6. Crear script de verificaci√≥n para producci√≥n
    console.log('\nüìù CREANDO SCRIPT DE VERIFICACI√ìN PARA PRODUCCI√ìN:');
    
    const productionScript = `
// Script de verificaci√≥n para producci√≥n
// Ejecutar en la consola del navegador en producci√≥n

console.log('üîç Verificando producci√≥n...');

// 1. Verificar endpoint de debug
fetch('/api/debug/production')
  .then(response => response.json())
  .then(data => {
    console.log('üîß Variables de entorno:', data.envVars);
    console.log('üåç Entorno:', data.environment);
  })
  .catch(error => {
    console.error('‚ùå Error en debug endpoint:', error);
  });

// 2. Verificar endpoint /api/feed/real con diferentes par√°metros
const endpoints = [
  '/api/feed/real?limit=4&offers=true',
  '/api/feed/real?limit=6&featured=true',
  '/api/feed/real?limit=8&new=true',
  '/api/feed/real?limit=6&category=comida',
  '/api/feed/real?limit=4&category=bebidas'
];

endpoints.forEach(async (endpoint) => {
  try {
    const response = await fetch(endpoint);
    if (response.ok) {
      const data = await response.json();
      console.log(\`‚úÖ \${endpoint}: \${data.data?.products?.length || 0} productos\`);
    } else {
      console.error(\`‚ùå \${endpoint}: \${response.status} \${response.statusText}\`);
      // Intentar obtener m√°s detalles del error
      const errorText = await response.text();
      console.error('Error details:', errorText);
    }
  } catch (error) {
    console.error(\`‚ùå \${endpoint}: \${error.message}\`);
  }
});
`;

    console.log('‚úÖ Script de verificaci√≥n creado');
    console.log('üìã Para usar en producci√≥n:');
    console.log('1. Abrir consola del navegador en producci√≥n');
    console.log('2. Pegar el script de verificaci√≥n');
    console.log('3. Ejecutar para verificar endpoints');

    // 7. Resumen de soluciones
    console.log('\nüéØ SOLUCIONES PARA ERRORES HTTP 500:');
    console.log('1. ‚úÖ Verificar variables de entorno en Vercel');
    console.log('2. ‚úÖ Verificar que las tablas existan en Supabase');
    console.log('3. ‚úÖ Verificar que haya productos en la BD');
    console.log('4. ‚úÖ Verificar que haya productos de vendedores activos');
    console.log('5. ‚úÖ Verificar que el endpoint /api/feed/real est√© funcionando');
    console.log('6. ‚úÖ Verificar autenticaci√≥n en producci√≥n');
    console.log('7. ‚úÖ Verificar que no haya errores de CORS');
    console.log('8. ‚úÖ Verificar que no haya errores de permisos');

    console.log('\nüîó PASOS PARA SOLUCIONAR EN PRODUCCI√ìN:');
    console.log('1. Ir a Vercel Dashboard');
    console.log('2. Verificar variables de entorno');
    console.log('3. Hacer redeploy si es necesario');
    console.log('4. Verificar logs de Vercel');
    console.log('5. Verificar logs de Supabase');

    console.log('\nüí° CAUSAS PROBABLES DE LOS ERRORES HTTP 500:');
    console.log('1. Variables de entorno no configuradas en Vercel');
    console.log('2. Endpoint /api/feed/real no desplegado correctamente');
    console.log('3. Problemas de autenticaci√≥n en producci√≥n');
    console.log('4. Problemas de permisos en Supabase');
    console.log('5. Problemas de CORS en producci√≥n');
    console.log('6. Problemas con las consultas SQL en producci√≥n');
    console.log('7. Problemas con las relaciones entre tablas');

  } catch (error) {
    console.error('‚ùå Error en el script:', error);
  }
}

diagnoseProduction500();










